{"data":{"site":{"siteMetadata":{"author":"Song Wang","homeCity":"Beijing"}},"markdownRemark":{"html":"<p>You better do rather than declare!</p>\n<p>Functional programming is all about what you “do” rather than what you “are” or what something “is,” and that’s a cool way to code. Statements, like <code class=\"language-text\">a = a+b</code> is the same as declaring with “is/are,” not what they do. So, in functional programming, the way could and should be <code class=\"language-text\">a =&gt; a+b</code>, and by that, you got one less state: there is no state <code class=\"language-text\">a</code>. You got <code class=\"language-text\">an</code> as an input, <code class=\"language-text\">a + b</code> as an output and that is it. You don’t need a state, or a “name” for your output as <code class=\"language-text\">a</code>, you just need the output <code class=\"language-text\">a+b</code>. In other words, you need one function with one expression for your output.</p>","excerpt":"You better do rather than declare! Functional programming is all about what you “do” rather than what you “are” or what something “is,” and…","fields":{"slug":"/blog/2017-09-04-arrow-function-greater-more-expressions-and-less-statement/","tagSlugs":["/tags/functional-programming/","/tags/es6/"]},"frontmatter":{"title":"More expressions and less statements with arrows","tags":["functional programming","es6"],"description":null,"date":"September 04, 2017"}}},"pageContext":{"slug":"/blog/2017-09-04-arrow-function-greater-more-expressions-and-less-statement/","previous":{"fields":{"slug":"/blog/2017-09-03-expression-trump-statement/"},"frontmatter":{"title":"Expression trump statement","tags":["scala","functional programming"]}},"next":{"fields":{"slug":"/blog/2017-09-13-sina-stock-crawler/"},"frontmatter":{"title":"Sina stock crawler","tags":["stock","python","crawler","data"]}}}}