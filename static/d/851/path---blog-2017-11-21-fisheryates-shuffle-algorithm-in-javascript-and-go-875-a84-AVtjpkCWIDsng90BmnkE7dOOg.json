{"data":{"site":{"siteMetadata":{"author":"Song Wang","homeCity":"Beijing"}},"markdownRemark":{"html":"<p> Fisher-Yates shuffle algorithm is a classic shuffling algorithm with great performance and mathematical correctness. Here is two implementation in Javascript and Go.</p>\n<h3>Javascript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// time: O(n)   space: O(n)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> shuffled <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> ran\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ran <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ran <span class=\"token operator\">!==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      shuffled<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shuffled<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    shuffled<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shuffled\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// time: O(n)   space: O(1)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">shuffleInPlace</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">let</span> ran\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ran <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n    i<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> arr\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Go</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> play\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"math/rand\"</span>\n        <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Shuffle</span><span class=\"token punctuation\">(</span>arr <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">len</span> <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        shuffled <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">var</span> ran <span class=\"token builtin\">int</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\n                rand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                ran <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> ran <span class=\"token operator\">!=</span> i <span class=\"token punctuation\">{</span>\n                        shuffled<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shuffled<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n\n                shuffled<span class=\"token punctuation\">[</span>ran<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> shuffled\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Acknowledgements:</h3>\n<ul>\n<li><a href=\"https://leetcode.com/problems/shuffle-an-array/\">leetcode: shuffle-an-array</a></li>\n<li><a href=\"https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates shuffle</a></li>\n<li><a href=\"https://github.com/hanzichi/leetcode/blob/master/Algorithms/Shuffle%20an%20Array/shuffle-an-array.js\">hanzichi’s solution</a></li>\n</ul>","excerpt":" Fisher-Yates shuffle algorithm is a classic shuffling algorithm with great performance and mathematical correctness. Here is two…","fields":{"slug":"/blog/2017-11-21-fisheryates-shuffle-algorithm-in-javascript-and-go/","tagSlugs":["/tags/javascript/","/tags/go/","/tags/algorithm/"]},"frontmatter":{"title":"Fisher–Yates shuffle algorithm in Javascript and Go","tags":["javascript","go","algorithm"],"description":null,"date":"November 22, 2017"}}},"pageContext":{"slug":"/blog/2017-11-21-fisheryates-shuffle-algorithm-in-javascript-and-go/","previous":{"fields":{"slug":"/blog/2017-11-20-settimeout-works-as-defer-in-go/"},"frontmatter":{"title":"setTimeOut works as defer in Go","tags":["javascript","go"]}},"next":{"fields":{"slug":"/blog/2018-01-03-tree-traverses-by-javascript/"},"frontmatter":{"title":"Tree Traverses by Javascript","tags":["javascript","algorithm"]}}}}