{"data":{"site":{"siteMetadata":{"author":"Song Wang","homeCity":"Beijing"}},"markdownRemark":{"html":"<p>I love functional programming(FP), but at the same time, it makes me tend to reach more space and time in computing. </p>\n<p>As one of the core principles in FP, is avoiding declaring variables, not even temporary variables. Which means all the data are supposed to be taken from the arguments. And so in Javascript, functional programmers tend to avoid <code class=\"language-text\">for</code> looping and make the best use of <code class=\"language-text\">Array.prototype.map</code>, <code class=\"language-text\">Array.prototype.reduce</code>(my favorite), etc., and loop the iterators without touching the variables out of the function’s scope. </p>\n<p>In this example, the algorithm is for determining whether an array of numbers has duplicate elements.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// []int -> bool</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containsDuplicate</span> <span class=\"token operator\">=</span> nums <span class=\"token operator\">=></span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span>cur<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> acc<span class=\"token punctuation\">.</span>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  acc<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> acc\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> \n  bool<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bool</code></pre></div>\n<p>Clean, functional programming right? not declaring a single variable​ and takes one input, gives one output. <code class=\"language-text\">reduce</code> and shorten the argument from an array to boolean. </p>\n<p>And yet, it has to eat all the elements from that array and push all of them into accelerator’s stack, while if you declared a temp Set on a higher scope and looping by <code class=\"language-text\">forEach</code> or ordinary <code class=\"language-text\">for</code>, you could jump out the first time you meet the duplicated element in the middle of looping, which, clearly makes more sense.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containsDuplicate</span> <span class=\"token operator\">=</span> nums <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> flag\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: There is no way to stop or break a forEach() loop other than by throwing an exception. If you need such behaviour,  the .forEach() method is the wrong tool, use a plain loop instead. If you are testing the array elements for a predicate  and need a boolean return value, you can use every() or some() instead.\n<cite>— MDN</cite></p>\n</blockquote>\n<p>So, the more reasonable way would still be the boring <code class=\"language-text\">for</code> loop, which allows you jump out from the middle.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">containDuplicate</span> <span class=\"token operator\">=</span> nums <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"I love functional programming(FP), but at the same time, it makes me tend to reach more space and time in computing.  As one of the core…","fields":{"slug":"/blog/2017-08-11-functional-programming-makes-imperfect-algorithm/","tagSlugs":["/tags/functional-programming/","/tags/javascript/"]},"frontmatter":{"title":"Functional programming makes imperfect algorithm","tags":["functional programming","javascript"],"description":null,"date":"August 11, 2017"}}},"pageContext":{"slug":"/blog/2017-08-11-functional-programming-makes-imperfect-algorithm/","previous":{"fields":{"slug":"/blog/2017-08-09-from-iterator-to-array-use-spread-operator/"},"frontmatter":{"title":"From iterators, to Array, use spread operator","tags":["javascript"]}},"next":{"fields":{"slug":"/blog/2017-08-14-languages-tend-to-replace-javascript/"},"frontmatter":{"title":"Scala, a good choice to replace javascript","tags":["javascript","scala"]}}}}