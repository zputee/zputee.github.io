{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"316b4acc-c76f-5027-9b66-38cc9e5d0519","excerpt":" 2018 has been an amazing year for me. I moved to San Diego, been working and traveling in both California and Arizona; contributed to…","timeToRead":5,"internal":{"content":" 2018 has been an amazing year for me. I moved to San Diego, been working and traveling in both California and Arizona; contributed to autonomous driving industry, and worked with many great technologies in this generation.\n\n## Work for self-driving\n\n This year, I worked as a full-time software engineer at TuSimple. The company fills with great leadership and extremely talented coworkers. Everybody is mature and confident in their skills, fearless about owning all kinds of difficult tasks independently. It's such a pleasure for me to work with them.\n\n With months of hard working, our vehicles have started making full autonomous runs commercially. And I have zero doubt about becoming a unicorn in the upcoming investment\n cycle.\n\n## Technology\n\n This year is another year about sharping existing technologies while embracing and respecting differences from other fields. \n\n### Languages and paradigms\n\n Last year is a year in which I leveraged on three different paradigms: object-oriented paradigm as in Python, procedural paradigm with Go, and functional paradigm in Javascript. I had lots of fun working with all of the paradigms.\n\n### Concurrency\n\n Most of the application level software I made this year are dealing with concurrent tasks, which pushed me to leverage some new concurrent programming solutions — namely, gevent/asyncio in Python, event loop in Node, and goroutine in Go. I used gevent the most, but I also liked the different ways that Node and Go handles concurrency.\n\n### Infrastructure\n\n This year I've worked with some lower level infrastructure too. E.g., integration, communication, resource orchestration, automation, monitoring, distribution, as well as cloud computing. I gained a much better view of how sophisticated software system works.\n\n### Ubuntu and MacOS\n\n I spent most of the time using MacOS and Ubuntu. They are both solid operating system and Unixy, made me seamlessly ssh into each other with joy. Using both two operating systems allows me to take advantages from the versatility on MacOS as well as the universal power of Linux machines. It also made me start building more Docker containers, for isolating and versioning my software and safely distributing with different operating systems.\n\n### Defensive programming\n\n I learned my lesson this year that nothing is entirely dependable in software, not APIs, not DNS, not networks, not AWS, not data warehouses, not even local infrastructures. To avoid accidence and be robust, I made my software much more defensive. I wouldn't assume other services or infrastructures are dependable anymore. Ensure error handling on both ends, retrys, pinging and polling, multi DNS lookups, database replicas. Instead of broken down by other services, I tried my best to make sure my service runs well.\n\n### Python\n\n I made lots of backend tools and web servers by Python this year, and I loved it. Its versatilities and expressive syntaxes are well suited for lots of goto tasks. I would also give many credits to iPython, which gave me lots of smooth debugging experiences.\n\n### Go\n\n I continued using Go as my side project's backend language. Go is mature for the modern web and CPUs, I didn't even need a third party framework for web services. And the performance from Go's concurrency handling is one of the best options for a large-scale web application. I also love the unified documentation from the Go community.\n\n### Node\n\n Aside from using Node for NPM and its related frontend tooling. I mostly used Node for building desktop application this year with Electron. Node would still the easiest way of handling concurrency for me, and it has been getting solid with its huge community. For a small-scale application, Node would be my top choice for the backend.\n\n### Frontend\n\n I've been getting more versatile on different frameworks and toolings in the front-end world. Although frontend is still the chaotic part in my software world, I'm much more comfortable on dealing unpromised solutions, as well as adopting and compromising new methods.\n\n### Vue\n\nI started using Vue and its ecosystem. Vue is great and earned my admiration - good concept, solid toolchains, and a close and quite determined community. With some reasonable overheads, I felt the easement and started getting very productive in just a few days. In the long run, Vue also reminded me of the power of HTML. I believe Vue will be a serious contender for React.\n\n### React\n\n I still loved React and maintained my side projects' front-end with the newest React releases, including Hooks and Fragments, I like the fact that React has been making the syntax simpler and more functional. For larger scale applications, React would still be my first choice.\n\n\n\n### Open source\n\n I've been still addicted to the community, my interests last year were mostly in Go, Python, Node, Lua, Vim, and the frontend Javascript world, including Vue, React, Gatsby, etc.\n\n  Code-wise, I made about 1800 commits last year on Github, mostly in Javascript and Node communities, including Vue, Gatsby and React. I also kept in touch with Python, Go and Vim as maintaining side projects.\n\n  Aside from committing codes, I started interacting more with people. I found lots of enjoyment and fulfillment along sharing knowledge and learned a lot from other people.\n\n## Life in the west\n\n Life in 2018 is my year of exploration. Two places I lived were entirely new for me. I found many other aspects of this world: the weathers, the landscapes, the cultures, etc., all of those made me understand this nation better.\n\n### San Diego, California\n\n For the most time of the year, La Jolla, San Diego, is my home. I work, eat, exercise. And I enjoyed living in the area.\n\n#### Perfect Weather\n\n The weather, as many others would probably mention first about San Diego, is the best weather I've seen. It comforts me for the most of the time throughout the year; cold down when it's hot, warm up when it's cold, dry up when it's humid; not too much rain, not too strong sunlight. It's perfect in a mild, comforting way.\n\n#### Activity vibes\n\n I bought my bike and started cycling around. San Diego has a great cycling culture, and it's quite easy to meet cyclers around the roads and beaches. Other than cycling, I sometimes go running and found a different vibe from California as most of the area is spread out with highways, which made me have to run longer and occasionally cut across hills or tails to get places.\n\n### Tucson, Arizona\n\n I had never been to Arizona before, but I liked it when I was working there in May, June, and November.\n\n#### Desert\n\n Tucson pushed me to have an early morning schedule because the sun is coming up strong and early every day, and it will get hot around 9. It also grants me the opportunity of running in the desert. It comes with lots of cactus spikes, but the freedom of running towards any direction is superb.\n\n#### Mountains\n\n Tucson has many surrounding mountains, they are beautiful and awesome, attached with uncountable hiking trails. Among which, mount Lemmon is my favorite, and I had some amazing times up there. There's also a 25-miles uphill, made me thrilled just thinking about climbing up from the bottom one day.\n"},"headings":[{"value":"Work for self-driving"},{"value":"Technology"},{"value":"Languages and paradigms"},{"value":"Concurrency"},{"value":"Infrastructure"},{"value":"Ubuntu and MacOS"},{"value":"Defensive programming"},{"value":"Python"},{"value":"Go"},{"value":"Node"},{"value":"Frontend"},{"value":"Vue"},{"value":"React"},{"value":"Open source"},{"value":"Life in the west"},{"value":"San Diego, California"},{"value":"Perfect Weather"},{"value":"Activity vibes"},{"value":"Tucson, Arizona"},{"value":"Desert"},{"value":"Mountains"}],"fields":{"slug":"/blog/2018-12-30-2018-in-review/"},"frontmatter":{"title":"2018 in review","tags":["review","2018","new year"],"date":"2018-12-30T20:11:26-08:00"}}},{"node":{"id":"72f3d6f7-1f6f-59a8-9292-a924c950fc45","excerpt":"Recently I had an interesting conversation with a cool guy named Chris, where he asked if I can explain how Node.js works to some…","timeToRead":4,"internal":{"content":"Recently I had an interesting conversation with a cool guy named Chris, where he asked if I can explain how Node.js works to some nontechnical people. I found it pretty interesting and challenging at the same time given that some of the abstractions I usually based on are probably not in audience's knowledge. After some thoughts, I found one of the ways I could do is starting from the connections in the real world and how the operating system simulates in the lower level, then moving up to Node.js. \n\nFollowing the thoughts with some lookups, I eventually put up some words and scratches as bellows, explaining some common concurrent programming terminologies, e.g., event loop, promise, etc. in Unix and Node.js.\n\n## How concurrency works in the real world\nFor starters, it's quite important to know that almost all of the things in the real world, are already happening concurrently.\n\nTaking a simple real-world example: every morning, I open my phone, order one cup of coffee and one sandwich before going to pick up, they both need about 4 mins to prepare. After 5 minutes, I get a message from the coffee shop: the manager texted me confirming the sandwich and coffee are all done by two different cooks already, I can pick up anytime I want. Time saved.\n\nThat's how easy concurrency happens in real life; it should be easy for any nontechnical person to understand. And to make it even simpler, we can abstract the participant groups by different responsibilities, scheduler, and worker.\n\n## The concept of scheduler and workers\nIt's simple for concurrency to happen because, for the most part, it's been done by just one scheduler, who schedule and keep an eye for the tasks, and some workers who do the job. You might argue that the scheduler could be unnecessary since the worker can directly reach back, but thing could happen, and there has to be someone continually checking the earlier task he delegated so that the tasks could be guaranteed to be reported back. In my case, the cook might get sick or anything making him unresponsive and never reach back. There has to be someone, at the very least, poke me back if one order never gets done for a long time. Which leads to another concept of \"timeout\" but I won't go further on that.\n\n\n## The implementations from an operating system (Unix)\nSo how did the operating system implement the scheduler and worker concept into our system? And before we move to the mechanism of asynchronous tasks in the system level, let me provide some basic explanation of the related techniques/terms that work in a Unix like system. By the way, most of the low-level implementations are very close to the real world. \n\n### Servers as workers\nA server is where we do our tasks; it's like the kitchen for our cooks working on the sandwich and coffee. A Unix server can handle tasks like file system read/write, DNS lookup, HTTP Get/Response. \n\n### Socket to communicate\nA socket is like a phone connection when it's connected between one cook in the kitchen and the manager from the front desk. The manager and the cook can talk with each other in either way. For this case, most of the case would be our scheduler checking every socket to see if anything has been done, the worker will then answer with the status at that moment. You can picture the scene that a manager keep asking workers, \"Hey, have you done with the coffee?\", \"Not yet,\" \"Hey, have you done with the sandwich?\", \"Not yet\" over and over.\n\n![epoll and kqueue](uploads/epoll.png)\n\n### Looping and Polling to check workers' status\nAs mentioned earlier, the manager will constantly be calling into the workers through a socket and see if anything has been done yet. This technique could be done in some different ways in a different operating system, e.g. epoll, kqueue, but the ultimate purposes are similar: keep looping and polling through all socket connections and let them check in with the current status. \n\n## Concurrency in Node.js\nConcurrency in Node.js is another abstraction based on synchronous programming while utilizing epoll/kqueue for asynchronous tasks.\n\n![node runtime](uploads/node.png)\n\n\n## Further explanation for some abstract terms\n### Event loop\nIt's an abstraction wraps over epoll/kqueue, for semi-endlessly looping and pooling all events/sockets registered in the event queue. Whenever an event or a socket start giving \"finished\" sign, the event got polled by event loop and pushed to the following step with callback handler, which will either executed by V8 or pushed into Event Queue again for further concurrent follow up tasks.\n\n### Callback event\nOne callback is an event handler attached with one specific event; this event is attached with the function that holds the callback. Whenever a worker finished a job, the worker let the event loop know by socket, the callback event then got triggered, and the callback with results from the job got pushed into Javascript call stack. \n\n### Promise\nIt's a type of syntax sugar that wrap over callback function; a callback function tells what the following working needs to be done after finished. Promise makes those after-finished work chain-able and compose-able. \n\n### Async await\nA syntax sugar wrap over Promises makes those functional/compose-able Promises working in procedural one stop at a Promise. \n"},"headings":[{"value":"How concurrency works in the real world"},{"value":"The concept of scheduler and workers"},{"value":"The implementations from an operating system (Unix)"},{"value":"Servers as workers"},{"value":"Socket to communicate"},{"value":"Looping and Polling to check workers’ status"},{"value":"Concurrency in Node.js"},{"value":"Further explanation for some abstract terms"},{"value":"Event loop"},{"value":"Callback event"},{"value":"Promise"},{"value":"Async await"}],"fields":{"slug":"/blog/2018-12-09-concurrency-from-real-world-to-nodejs/"},"frontmatter":{"title":"Concurrency from real world to Node.js","tags":["node","javascript","concurrency"],"date":"2018-12-09T19:21:51-08:00"}}},{"node":{"id":"9be36fb8-2856-5b2c-b6e0-0070571f5ee5","excerpt":"Dynamic programming might be the most interesting approach in computer science with a clean and elegant solution. The general idea is to…","timeToRead":3,"internal":{"content":"Dynamic programming might be the most interesting approach in computer science with a clean and elegant solution. The general idea is to find the mathematical relations(equations) between the input and output. With enough \"dark magic\", the solution could be extremely simple.\n\nThe following question is asked by an interviewer who’s specialized in algorithms.\n\n> A kid can move towards three directions: up, left, right. Each move has the same length. The kid can't move down and can't move to his last position(eg. moving to the right then left is not allowed). How many unique ways by n moves the kid could have?\n\n\n## The intuitive backtracking way, O(n!)\nBy the first glance, the question could be done by backtracking all the possible ways starting from position \"0,0\", and count the number of it. \n\nBut at the same time, since backtracking needs to be done incrementally, in the worst case we have to store all the previous moves in the memory, which is highly inefficient. Also, the computing complexity of backtracking goes up to n factorial, with a pretty large memory space.\n\nThat being said, the dumb solution is obviously a less optimized solution. But we can certainly try some more consistent way by finding the pattern or pure math.\n\n## Dynamic programming, O(n)\n\nBy being less dumb, we may notice that we don't really have to store all of the previews moves. Since we are just calculating number count, we could find a relation with previous ending spot and the next one, and just store the counting number without move records. The validating part could be avoid by not adding invalid counts from each step followed by a same pattern. \n\n#### Finding the DP relation equation\nThat being said, if we have a pattern function that links the counting numbers' relations with each other, then we could find a much smarter way to incrementally get the result. But the relation is not that obvious in this problem, and that's where I got stuck. Normally, a dynamic programming only need the relation between the previous and current position, but in this problem, the relation actually lies from the first position to the last position. \n\n#### TL;DR\nConsidering this question, for n moves, the kid could move at most up 10 times. But he doesn't have to be up 10 times, he could end up in 0 - 9 up times. So we may consider the kid have 10 cases divided by upper level. For upper 0 level, we say the kids didn't move up at all, for upper 1 level we say the kid moved up once. \n\nIf you think about the relation by upper level, for each level the id went up, he could end up with lots of unique ways, but that's all related with the ways from the last level. \n\nOn level n, for the position with x-axis of 0, the kid could have only one way coming right from the last level with x-axis of 0, for the position with x-axis of +1 or -1, the kid has two times of the ways coming from the level before the last level, and it keeps following the same pattern throughout the levels.\n\nSo, the final pattern is \n\n> F(n) = F(n-1) + 2F(n-2) + 2F(n-3) + ... + 2F(1) + 2\n\nwith F(n) for the total ways with n steps. \n\nBy that equation, we could simply organize a simple array and keep track from move 0 to move n, and calculate the final result based on all the former results. The complexity from that would be linear, which is way better than n factorial.\n\n\n\n## Mathematical Induction, O(1)\nA Linear way is usually considered as a \"good\" solution for computing time. But if we could find the pure mathematical equation that takes n and simply puts the final result, that would be the fastest possible solution. \n\n### Draw and find the Pascal's triangle\n\nIf we are trying to find the pure math relations, we usually need to draw out the math and \"feel\" it.\n\n![pascal's triangle](images/uploads/pascal.png)\n\nIn the triangle, the solid line stands for the first move, the dashed stands for the second, and the curled for the third. By connecting all of the ending positions from each move, we could find a larger triangle every time. And if you looked at the ending counting numbers from the left edge or right edge of the triangle, it actually goes like a [Pascal's triangle](https://www.wikiwand.com/en/Pascal%27s_triangle), from \"1\" to \"1, 2 ,1\", to \"1, 3, 3, 1\" to \"1, 4, 6, 4, 1\".\n\nFollowing through the two Pascal's triangles, we could find the ultimate equation is\n\n> F(n) = 2 ^ (n + 1) - 1\n\nAnd by that, the computing time will always by the same time, which is constant time, the fastest way.\n\n\n\n"},"headings":[{"value":"The intuitive backtracking way, O(n!)"},{"value":"Dynamic programming, O(n)"},{"value":"Finding the DP relation equation"},{"value":"TL;DR"},{"value":"Mathematical Induction, O(1)"},{"value":"Draw and find the Pascal’s triangle"}],"fields":{"slug":"/blog/2018-01-10-using-pascals-triangle-with-dynamic-programing-problem/"},"frontmatter":{"title":"Using Pascal's triangle for dynamic programming problem","tags":["algorithm","dynamic programming"],"date":"2018-01-10T17:12:39-05:00"}}},{"node":{"id":"9558294d-6594-57d4-94ba-136cf874dbb3","excerpt":"I spent two hours for shortening my zsh’s awful time. After a quite bit of researching on both zshell and some related plugins, I found the…","timeToRead":1,"internal":{"content":"I spent two hours for shortening my zsh's awful time. After a quite bit of researching on both zshell and some related plugins, I found the command `zsh -xv` could verbosely log all the loading files during a start. And the monster that was jamming this part is nvm, the node virtual machine manager. \n\nApparently, nvm needs to be loaded on every instance for referencing the commands and scripts, which is way more than other vm manager like rvm or pyenv. \n\nThough I found the reason, it was hard for me to uninstall nvm entrirely, since Node.js is now in a lot of my projects looking for a specific version controled by nvm. But as a terminal guy, who probably open 50 terminals a day, 3s each is not acceptable. \n\nMy final solution is to alias the loading commands by a short macro, for whenever I need Node to execute.\n\n\nThe performance got boosted to 1s, which is way more comfortable to me.\n\n"},"headings":[],"fields":{"slug":"/blog/2018-01-07-nvm-is-slowing-zshell-start-time-a-lot/"},"frontmatter":{"title":"Making zshell load faster on start","tags":["zsh","nvm","node"],"date":"2018-01-07T18:06:49-05:00"}}},{"node":{"id":"98c5b199-b33a-5e94-bbed-0a569b227690","excerpt":"Last week, I was asked by an interviewer by tree traverse with both recursion and iteration. Though I had done recursion on that topic, it…","timeToRead":2,"internal":{"content":"Last week, I was asked by an interviewer by tree traverse with both recursion and iteration. Though I had done recursion on that topic, it took me some time to the iterative solution. I rethought the problems and reviewed the final solutions, on both preorder, in-order, and postorder. \n\n### Building a tree\n``` js\nfunction TreeNode(val) {\n  this.val = val\n  this.left = this.right = null\n}\n\nmodule.exports = function buildTree(nodes) {\n  const build = i => {\n    if (nodes[i] !== null && nodes[i] !== undefined) {\n      const node = new TreeNode(nodes[i])\n      node.left = build(i * 2 + 1)\n      node.right = build((i + 1) * 2)\n      return node\n    } else {\n      return null\n    }\n  }\n\n  return build(0)\n}\n```\n\n### Preorder\n```js\nconst buildTree = require('./build-tree.js')\n\nconst preorderRecursive = root => {\n  // root left right\n  const walk = node => {\n    if (!node) return\n    console.log(node.val)\n    walk(node.left)\n    walk(node.right)\n  }\n\n  walk(root)\n}\n\nconst preorderIterative = root => {\n\n  if (root == null) return\n\n  let stack = [root]\n\n  while (stack.length > 0) {\n    let node = stack.pop()\n    console.log(node.val)\n\n    if (node.right !== null) {\n      stack.push(node.right)\n    }\n    if (node.left !== null) {\n      stack.push(node.left)\n    }\n  }\n}\n\nconst tree = buildTree([1, 2, 3, 4, 5])\n\npreorderRecursive(tree)\npreorderIterative(tree)\n\n```\n\n### Inorder\n\n```js\nconst buildTree = require('./build-tree.js')\n\nconst inorderRecursive = root => {\n  // left root right\n  const walk = node => {\n    if (!node) return\n    walk(node.left)\n    console.log(node.val)\n    walk(node.right)\n  }\n\n  walk(root)\n}\n\n\nconst inorderIterative = root => {\n  if (!root) return\n\n  let stack = [root]\n  let cur = root.left\n\n  while (1) {\n    if (cur !== null) {\n      stack.push(cur)\n      cur = cur.left\n    } else {\n      if (stack.length > 0) {\n        cur = stack.pop()\n        console.log(cur.val)\n        cur = cur.right\n      } else {\n        break\n      }\n    }\n  }\n}\n\n\n```\n\n### Postorder\n\n```js\nconst buildTree = require('./build-tree.js')\n\nconst postorderRecursive = root => {\n  // left right root\n  const walk = node => {\n    if (!node) return\n    walk(node.left)\n    walk(node.right)\n    console.log(node.val)\n  }\n\n  walk(root)\n}\n\nconst postorderIterativeTwoStack = root => {\n  if (root === null) return\n\n  let s1 = []\n  let s2 = []\n\n  s1.push(root)\n\n  while (s1.length > 0) {\n    let node = s1.pop()\n    s2.push(node)\n\n    if (node.left) {\n      s1.push(node.left)\n    }\n    if (node.right) {\n      s1.push(node.right)\n    }\n  }\n\n  while (s2.length > 0) {\n    let node = s2.pop()\n    console.log(node.val)\n  }\n}\n\n```\n\n### Levelorder\n```js\nconst recursive = root => {\n  let res = []\n\n  const walk = (node, level) => {\n    if (!node) return\n\n    if (res[level] === undefined) res[level] = [node.val]\n    else res[level].push(node.val)\n\n    walk(node.left, level + 1)\n    walk(node.right, level + 1)\n  }\n\n  walk(root, 0)\n\n  return res \n}\n\n\nconst iterative = root => {\n  let queue = [root]\n  let res = []\n\n  while (queue.length > 0) {\n    let curLevel = []\n\n    let len = queue.length\n\n    for (let i = 0; i < len; i++) {\n      let curNode = queue.shift()\n\n      if (curNode !== null) {\n        curLevel.push(curNode.val)\n\n        queue.push(curNode.left)\n        queue.push(curNode.right)\n      }\n    }\n\n    if (curLevel.length !== 0) res.push(curLevel)\n  }\n\n  return res\n}\n\n```\n\n"},"headings":[{"value":"Building a tree"},{"value":"Preorder"},{"value":"Inorder"},{"value":"Postorder"},{"value":"Levelorder"}],"fields":{"slug":"/blog/2018-01-03-tree-traverses-by-javascript/"},"frontmatter":{"title":"Tree Traverses by Javascript","tags":["javascript","algorithm"],"date":"2018-01-03T00:52:24-05:00"}}},{"node":{"id":"7edfce2b-0263-53bf-a12c-04327eee7c06","excerpt":" Fisher-Yates shuffle algorithm is a classic shuffling algorithm with great performance and mathematical correctness. Here is two…","timeToRead":1,"internal":{"content":" Fisher-Yates shuffle algorithm is a classic shuffling algorithm with great performance and mathematical correctness. Here is two implementation in Javascript and Go.\n\n### Javascript\n```js\n// time: O(n)   space: O(n)\nfunction shuffle(arr) {\n  const len = arr.length\n  const shuffled = new Array(len)\n\n  let i = 0\n  let ran\n  const end = len - 1\n\n  while (i <= end) {\n    ran = ~~(Math.random() * (i + 1))\n\n    if (ran !== i) {\n      shuffled[i] = shuffled[ran]\n    }\n\n    shuffled[ran] = arr[i]\n\n    i++\n  }\n\n  return shuffled\n}\n\n// time: O(n)   space: O(1)\nfunction shuffleInPlace(arr) {\n  const len = arr.length\n\n  let ran\n  let i = 0\n  const end = len - 1\n\n  while (i <= end) {\n    ran = ~~(Math.random() * (i + 1))\n\n    ;[arr[ran], arr[i]] = [arr[i], arr[ran]]\n\n    i++\n  }\n\n  return arr\n}\n\n```\n\n### Go\n\n```go\npackage play\n\nimport (\n        \"math/rand\"\n        \"time\"\n)\n\nfunc Shuffle(arr []int) []int {\n        len := len(arr)\n        shuffled := make([]int, len)\n\n        var ran int\n\n        for i := 0; i < len; i++ {\n\n                rand.Seed(time.Now().UnixNano())\n                ran = rand.Intn(i + 1)\n\n                if ran != i {\n                        shuffled[i] = shuffled[ran]\n                }\n\n                shuffled[ran] = arr[i]\n        }\n\n        return shuffled\n}\n\n```\n\n### Acknowledgements:\n\n* [leetcode: shuffle-an-array](https://leetcode.com/problems/shuffle-an-array/)\n* [Fisher-Yates shuffle](https://www.wikiwand.com/en/Fisher%E2%80%93Yates_shuffle)\n* [hanzichi's solution](https://github.com/hanzichi/leetcode/blob/master/Algorithms/Shuffle%20an%20Array/shuffle-an-array.js)\n\n"},"headings":[{"value":"Javascript"},{"value":"Go"},{"value":"Acknowledgements:"}],"fields":{"slug":"/blog/2017-11-21-fisheryates-shuffle-algorithm-in-javascript-and-go/"},"frontmatter":{"title":"Fisher–Yates shuffle algorithm in Javascript and Go","tags":["javascript","go","algorithm"],"date":"2017-11-21T20:06:45-05:00"}}},{"node":{"id":"bcea8354-b4e6-5cdb-8dae-2e6db775ff26","excerpt":"It all comes to the point of executing something else after done doing the current thing.","timeToRead":1,"internal":{"content":"It all comes to the point of executing something else after done doing the current thing.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-11-20-settimeout-works-as-defer-in-go/"},"frontmatter":{"title":"setTimeOut works as defer in Go","tags":["javascript","go"],"date":"2017-11-20T00:54:20-05:00"}}},{"node":{"id":"48c4c907-8506-535f-a984-7940424db79c","excerpt":"Chrome is amazing, and provides closure scope variable for a better debugging experience. In console with the following codes, the obj…","timeToRead":1,"internal":{"content":"Chrome is amazing, and provides closure scope variable for a better debugging experience.\n\nIn console with the following codes, the obj function returns an object with a closure. Without developer tool, we don't know what exactly the closure is for either `setI or getI`, but after logging the returning object, Chrome gives us a `[[Scopes]]` referencing object for both `setI` and `getI`, with the Closure obj of `i`.\n\n```\nlet obj = function() {\n  let i = 0\n\n  return {\n    setI(k) {\n      i = k\n    },\n\n    getI() {\n      return i\n    },\n  }\n}\n\nlet x = obj()\n\nconsole.log(x)\n\n```\n\n![Closure in Chrome](images/uploads/11-11.png)\n\n"},"headings":[],"fields":{"slug":"/blog/2017-11-11-find-the-closure-in-chrome-developer-tools/"},"frontmatter":{"title":"Finding Closure in Chrome developer tools","tags":["javascript","closure"],"date":"2017-11-11T20:12:54-05:00"}}},{"node":{"id":"23781058-9ecc-52be-b0eb-868e0f2a12b4","excerpt":"Using top-down pattern","timeToRead":1,"internal":{"content":"Using top-down pattern\n\n```js\nconst mergeSort = array => {\n  if (array.length < 2) {\n    return array\n  }\n\n  const middle = ~~(array.length / 2)\n  const left = array.slice(0, middle)\n  const right = array.slice(middle)\n\n  return merge(mergeSort(left), mergeSort(right))\n}\n\nconst merge = (left, right) => {\n  const array = []\n\n  while (left.length && right.length) {\n    if (left[0] < right[0]) {\n      array.push(left.shift())\n    } else {\n      array.push(right.shift())\n    }\n  }\n  return [...array, ...left, ...right]\n}\n\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-11-04-merge-sort-in-javascript-es6/"},"frontmatter":{"title":"Merge sort in Javascript ES6","tags":["algorithm","sorting"],"date":"2017-11-04T14:41:32-04:00"}}},{"node":{"id":"49d91b4d-42aa-57b0-a9af-723260217944","excerpt":"I am having a different result from two simple looping approach. and  The problem came from a bad use of for in for array looping with the…","timeToRead":1,"internal":{"content":"I am having a different result from two simple looping approach.\n\n```js\nfor(let i = 0; i<left.length ; i++) {\n  bfs([...temp, left[i]], [...left.slice(0, i), ...left.slice(i+1)])\n}\n```\n\nand \n```js\nfor(let i in left) {\n  bfs ([...temp, left[i]], [...left.slice(0, i), ...left.slice(i+1)])\n}\n```\n\nThe problem came from a bad use of for in for array looping with the care of indexing\n\n> Note:`for...in`should not be used to iterate over an[`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)where the index order is important. --- MDN\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-10-21-for-in-is-not-good-for-array-looping-with-index/"},"frontmatter":{"title":"For in is not good for array looping with index","tags":["javascript"],"date":"2017-10-21T15:48:56-04:00"}}},{"node":{"id":"9f0320ae-0765-5af7-842e-5011d672f664","excerpt":"I used to believe that the triple equal checks both type and equality whereas double equal only checks for equality, which makes triple…","timeToRead":1,"internal":{"content":"I used to believe that the triple equal checks both type and equality whereas double equal only checks for equality, which makes triple equal more strict and does more jobs. But I just found out that I was wrong after reading this.\n\n> \nIt's not that === checks for type, it's that == additionally converts into compatible types.\n\n```js\nx = new Number(1);\ny = new Number(1);\nz = 1;\n\nx == y; \\\\ false (x and y, despite both being Number, refer to different memory addresses)\nx == z; \\\\  true (x is converted to builtin primitive 1)\nx === y; \\\\ false (x and y refer to different memory addresses)﻿\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-10-19-actually-do-more-things-than/"},"frontmatter":{"title":"== actually does more jobs than ===","tags":["javascript"],"date":"2017-10-19T01:25:43-04:00"}}},{"node":{"id":"0610bc6b-4f3a-504d-9afa-35f7851cc626","excerpt":"Use the following function to get non-duplicate version of a two-dimensional​ array","timeToRead":1,"internal":{"content":"Use the following function to get non-duplicate version of a two-dimensional​ array\n\n```js\nconst unique = (arr) => {\n  let map = {}\n  return arr.filter(item => {\n    if (item in map) return false\n    else {\n      map[item] = true\n      return true\n    }\n  })\n}\n\nuique([[1,2], [1,2]]) \n//=> [[1,2]]\n```\n\n\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-10-02-uniquify-a-two-dimensional-array/"},"frontmatter":{"title":"Uniquify a two dimensional array","tags":["javascript","array"],"date":"2017-10-02T15:04:24-04:00"}}},{"node":{"id":"764506ec-295d-5679-8cee-5dde54cd9435","excerpt":"Set can store different kinds of element, but specifically for storing Arrays, you will have to use   to avoid duplication.  without…","timeToRead":1,"internal":{"content":"Set can store different kinds of element, but specifically for storing Arrays, you will have to use `JSON.stringify()` to avoid duplication. \n\nwithout stringify:\n```js\nlet set = new Set()\nset.add([1])\nset.add([1])\n\nset.size // => 2\n```\n\nwith stringify:\n```js\nset.add(JSON.stringify([1]))\nset.add(JSON.stringify([1]))\n\nset.size // => 1\n```\n\nAlso, whenever you want to pull the data back as Arrays, use `JSON.parse` with `Array.prototype.map()`\n```js\n[...set] //=> '[1]'\n[...set].map(JSON.parse) //=> [1]\n```\n\n\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-10-01-use-jsonstringify-for-storing-in-sets/"},"frontmatter":{"title":"Use JSON.stringify for storing in Sets","tags":["javascript","set"],"date":"2017-10-01T21:35:06-04:00"}}},{"node":{"id":"04bafa8d-d1c1-55f7-95c2-c6566572a148","excerpt":"Side note It’s pretty useful for creating a Hashmap, since it doesn’t change an integer except changing undefined to 0.","timeToRead":1,"internal":{"content":"```js\n\n~~(undefined)\n//=> 0\n\n~~(null)\n//=> 0\n```\n\n### Side note\nIt's pretty useful for creating a Hashmap, since it doesn't change an integer except changing undefined to 0.\n\n```js\nlet hash = {}\n\nfor (let item of things) hash[item] = ~~hash[item] + 1\n\n//=> { 'a': 1, 'b': 2, ... }\n```\n"},"headings":[{"value":"Side note"}],"fields":{"slug":"/blog/2017-09-20-double-tilde-makes-undefined-or-null-to-zero/"},"frontmatter":{"title":"Double tilde makes undefined or null to zero","tags":["javascript","bit manipulation"],"date":"2017-09-20T18:10:57-04:00"}}},{"node":{"id":"195a02d2-ae37-5ba2-a21a-1dbe599b3a0c","excerpt":"Say you have a HTML tag like This means you can access the elements with an id lol by","timeToRead":1,"internal":{"content":"Say you have a HTML tag like\n```html\n  <h1 id='lol'>Hello</h1>\n```\n\n\nThis means you can access the elements with an id lol by\n\n```\nwindow.lol\n//=> \n<h1 id=​\"lol\">​Hello​</h1>​\n```\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-09-17-id-in-html-gives-window-a-key/"},"frontmatter":{"title":"Id in HTML gives window a key","tags":["dom","javascript","html"],"date":"2017-09-17T00:31:10-04:00"}}},{"node":{"id":"8f22879b-6b54-5ea3-becc-2d5813bade9e","excerpt":"Arrow The ES2015 specification introduces the arrow function syntax for writing function expressions. As well as being terser than regular…","timeToRead":1,"internal":{"content":"## Arrow\n> The ES2015 specification introduces the[arrow function syntax](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions)for writing function expressions. As well as being terser than regular function expressions, they can also have implicit return and most importantly, they always use the value of`this`from the enclosing scope.\n\n\n## Bind this\n> React allows you to define arbitrary methods on your component classes and these methods are automatically bound with the correct context for`this`when you create your components with`React.createClass`. This allows you move your callback code out onto your component.\n"},"headings":[{"value":"Arrow"},{"value":"Bind this"}],"fields":{"slug":"/blog/2017-09-15-why-react-uses-bind-this-and-arrow-function-in-a-component/"},"frontmatter":{"title":"Why react uses bind this and arrow function in a component","tags":["react","javascript"],"date":"2017-09-15T22:36:46-04:00"}}},{"node":{"id":"404082bf-8a0d-577b-afaa-50ef1aaab747","excerpt":"Type undefined is undefined, null is an obejct standing for nothing, while undefined  Expressions","timeToRead":1,"internal":{"content":"## Type\n```js\ntypeof null\n//=> \"object\"\n\ntypeof undefined\n//=> \"undefined\"\n\ntypeof NaN\n//=> \"number\"\n```\nundefined is undefined, null is an obejct standing for nothing, while undefined \n\n\n## Expressions\n```js\nnull + ''\n//=> \"null\"\n\nundefined + ''\n//=> \"undefined\"\n\n// NaN -> NaN\nNaN + ''\n//=> \"NaN\"\n\nNaN + 1\n//=> NaN\n\nNaN + 3\n//=> NaN\n\n// null + int -> int\nnull + 3\n//=> 3\n\n// NaN + undefined||null -> NaN\nnull + NaN\n//=> NaN\n\nundefined + NaN\n//=> NaN\n\nundefined + 3\n//=> NaN\n\n// WTF\nnull + undefined\n//=> NaN\n```\n\n\n"},"headings":[{"value":"Type"},{"value":"Expressions"}],"fields":{"slug":"/blog/2017-09-15-about-null-undefined-nan/"},"frontmatter":{"title":"About null, undefined, NaN","tags":["javascript"],"date":"2017-09-15T17:40:06-04:00"}}},{"node":{"id":"d8f0ef36-8ec7-5b25-877c-52f501125e05","excerpt":"Avoiding something that you understand it fully, but disagree with, is wisdom. Avoiding the same thing without understanding it is blind…","timeToRead":1,"internal":{"content":"> Avoiding something that you understand it fully, but disagree with, is wisdom. Avoiding the same thing without understanding it is blind following and/or ignorance. --- MPJ\n\nI choose wisdom over ignorance.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-09-15-why-should-you-know-both-oop-and-fp/"},"frontmatter":{"title":"Why should you know both OOP and FP","tags":["OOP","FP"],"date":"2017-09-15T17:07:29-04:00"}}},{"node":{"id":"fb219497-e248-5664-88b8-dd8b60edf481","excerpt":"Because of most of the thing in this world just needs me to know how to do rather than how it is.","timeToRead":1,"internal":{"content":"Because of most of the thing in this world just needs me to know how to do rather than how it is.\n"},"headings":[],"fields":{"slug":"/blog/2017-09-15-why-i-dont-memorize-most-of-the-doc/"},"frontmatter":{"title":"Why I don't memorize most of the doc","tags":["coding"],"date":"2017-09-15T10:42:00-04:00"}}},{"node":{"id":"194edf03-a5f0-5ae2-a8c8-ccfb34d43846","excerpt":"output: ","timeToRead":1,"internal":{"content":"```python\nimport random\n\nmatric = [[0]*10 for i in range(10)]\n\noutput = map(lambda x: map(lambda y: random.randrange(10), x), matric)\n\nprint (output)\n```\n\noutput: \n```\n[[4, 0, 5, 7, 2, 5, 0, 0, 9, 5], [0, 7, 7, 6, 5, 6, 2, 5, 1, 8], [8, 0, 2, 8, 9, 0, 2, 1, 4, 8], [7, 6, 7, 4, 8, 0, 2, 8, 5, 9], [5, 6, 9, 2, 0, 2, 0, 8, 5, 0], [7, 2, 9, 6, 7, 9, 2, 0, 1, 8], [0, 4, 6, 8, 8, 4, 1, 9, 0, 5], [0, 9, 5, 1, 1, 2, 8, 6, 4, 7], [8, 1,3, 0, 1, 4, 1, 6, 2, 2], [2, 4, 5, 0, 1, 5, 1, 3, 3, 5]]\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-09-15-nested-lambda-function-in-python/"},"frontmatter":{"title":"Nested lambda function in python","tags":["python","functional programming","lambda"],"date":"2017-09-15T09:34:20-04:00"}}},{"node":{"id":"93f666a5-9786-5e23-b90d-dd3e5ecefb2a","excerpt":"","timeToRead":1,"internal":{"content":"```shell\ncp ./{index.js,printShape.js} ~/dev/546-lab/lab2\n```\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-09-14-copy-paste-multiple-files-in-terminal/"},"frontmatter":{"title":"Copy paste multiple files in terminal with brace expansion","tags":["linux","unix","shell"],"date":"2017-09-14T19:37:20-04:00"}}},{"node":{"id":"c2792bf9-a9cd-5cae-ad08-96cf2496bb01","excerpt":"A few month ago, my friend Hongkai, Zhang, Ph.D. found me and asked me if I could crawl all the data from  sina stock source , which…","timeToRead":2,"internal":{"content":"A few month ago, my friend Hongkai, Zhang, Ph.D. found me and asked me if I could crawl all the data from [sina stock source](http://stock.finance.sina.com.cn/option/quotes.html), which, provides all sorts of Chinese options data for the next season. I didn' know too much about the stock, especially from Chinese sites. But I kicked this out since Hongkai is a nice person and he helps me once before; I owe him once.\n\nBefore anything, I wanted to say sorry to my Chinese fellows who are reading this blog; I probably should have written this in Chinese since most of the people might find it useful is probably from China. But please excuse me that I am terrible at Chinese writing(didn’t even finish writing section on [Gaokao](https://www.wikiwand.com/en/National_Higher_Education_Entrance_Examination)), and I’ve been writing English for a while, and I am used to it now.\n\n## Digging Sina’s API\n### The source\nFirst thing for this project is to find where the data comes from and if there is an API opened to the public already, so I can get the data without crawling raw web pages and mining the data. \n\nTypically the API would be written within the developer’s page from a company. But Sina, like a lot of other Chinese company, doesn’t have much of developer’s instructions, including API protocols. So I did some research on Sina and found the API lives on another one site, [here](http://hq.sinajs.cn/list=OP_DOWN_5100501707). \n\n### The REST API of Sina\nThe API site is a multi end point REST API, with the list of each stock table with a hash id. While the index comes from [here](http://stock.finance.sina.com.cn/futures/api/openapi.php/StockOptionService.getRemainderDay?date=201706), with a `getRemainderDay` method and a query string `date` for the month of each month’s stock index. And finally, the data stays and the endpoints in a normal JSON format.\n\n## The algorithm\nSince the index of all data is stored in one API endpoint, and the list for each stock option comes from another API endpoint. The data structure is similar to a two-dimensional list. So I can just loop through the first API to get all the list and paired them with `UP` table and `DOWN` table, and loop through all the paired `UP`s and `DOWN`s’ data and combine them with a whole table. It’s a simple and straightforward solution, and I don’t see anywhere around it.\n\n## Python Codes\nIt’s been a few month I never write python, but thankfully Python is easy to pick up, as the syntax is pretty clean. I finished the two loops with seven functions and one extra loop with writing CSV file. Source code lives [here](https://github.com/wangsongiam/sina-stock-crawler). \n"},"headings":[{"value":"Digging Sina’s API"},{"value":"The source"},{"value":"The REST API of Sina"},{"value":"The algorithm"},{"value":"Python Codes"}],"fields":{"slug":"/blog/2017-09-13-sina-stock-crawler/"},"frontmatter":{"title":"Sina stock crawler","tags":["stock","python","crawler","data"],"date":"2017-09-13T23:27:27-04:00"}}},{"node":{"id":"030a8ef4-b1cc-5b29-986e-9669ad989d03","excerpt":"You better do rather than declare! Functional programming is all about what you “do” rather than what you “are” or what something “is,” and…","timeToRead":1,"internal":{"content":"You better do rather than declare!\n\nFunctional programming is all about what you \"do\" rather than what you \"are\" or what something \"is,\" and that's a cool way to code. Statements, like `a = a+b` is the same as declaring with \"is/are,\" not what they do. So, in functional programming, the way could and should be `a => a+b`, and by that, you got one less state: there is no state `a`. You got `an` as an input, `a + b` as an output and that is it. You don't need a state, or a \"name\" for your output as `a`, you just need the output `a+b`. In other words, you need one function with one expression for your output.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-09-04-arrow-function-greater-more-expressions-and-less-statement/"},"frontmatter":{"title":"More expressions and less statements with arrows","tags":["functional programming","es6"],"date":"2017-09-04T15:10:21-04:00"}}},{"node":{"id":"43856af9-9267-5fd8-8513-e0189a607c08","excerpt":"In programming, a statement is about changing states, while expression is all about the results. Which means. Expressions\u001b usually have…","timeToRead":1,"internal":{"content":"In programming, a statement is about changing states, while expression is all about the results. Which means. Expressions\u001b usually have fewer side effects on the states, especially outer states, and should be heavily used for functional programming. \n\nTaking the following Scala(everything is an expression in Scala) codes as an example:\n\n\n```scala\ndef abs(n: Int): Int = \n\n\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-09-03-expression-trump-statement/"},"frontmatter":{"title":"Expression trump statement","tags":["scala","functional programming"],"date":"2017-09-03T04:19:50-04:00"}}},{"node":{"id":"36083556-aa52-5c6d-87b7-23b4191f1069","excerpt":"char description unicode html html entity · Middle Dot U+00B7 · · • Bullet U+2022 • • ‧ Hyphenation Point U+2027 ₁ N/A ∙ Bullet Operator U…","timeToRead":1,"internal":{"content":"\n| char | description | unicode | html |html entity  |\n|:--|:--|:--|:--|:--|\n|·|     Middle Dot     |       U+00B7  |   &#183;  |    &middot;|\n|•    |  Bullet              |  U+2022    | &#8226;     | &bull;|\n|‧    |  Hyphenation Point   |  U+2027    | &#8321;|N/A|\n|∙   |   Bullet Operator     |  U+2219    | &#8729;|N/A|\n|●     | Black Circle        |  U+25CF    | &#9679;|N/A|\n|⬤   |  Black Large Circle  |  U+2B24    | &#11044;|N/A|\n"},"headings":[],"fields":{"slug":"/blog/2017-09-02-variants-of-middot-in-html-and-unicode/"},"frontmatter":{"title":"Variants of middot in HTML and unicode","tags":["html","css"],"date":"2017-09-02T15:18:01-04:00"}}},{"node":{"id":"f80ebd4f-d776-58bc-9f55-74aac8792b3d","excerpt":"the following two expressions do the same job, but the later one doubles the runtime.","timeToRead":1,"internal":{"content":"the following two expressions do the same job, but the later one doubles the runtime.\n\n```js\nconst arr = new Array(100)\narr[0] = 1\n\n```\n\n```js\nconst arr = [1, ...new Array(99)]\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-08-29-spread-operator-doubles-runtime/"},"frontmatter":{"title":"Spread operator doubles runtime","tags":["javascript"],"date":"2017-08-29T20:47:06-04:00"}}},{"node":{"id":"0cd26fee-bbb3-5b19-b3fa-9d92a160a627","excerpt":"lol","timeToRead":1,"internal":{"content":"lol\n"},"headings":[],"fields":{"slug":"/blog/2017-08-21-array-in-javascript-is-object/"},"frontmatter":{"title":"Array in javascript is object","tags":["javascript"],"date":"2017-08-21T03:55:24-04:00"}}},{"node":{"id":"c56d2f9d-c47e-56da-9844-02a3ab088970","excerpt":"Recently, I was learning functional programming, and I happened to notice in  this book , the author uses eight widths of indentation all…","timeToRead":1,"internal":{"content":"Recently, I was learning functional programming, and I happened to notice in [this book](https://github.com/getify/Functional-Light-JS/blob/7ad68a545f2800611d11d10d5a8337e4561c867e/ch3.md), the author uses eight widths of indentation all the time. To be honest, that's not the coding styled I would like to read/code, and I was pissed by reading that enlarged indentation a lot. But surprisingly, it didn't piss me at all. \n\nI believe that was the arrow function and functional programming thing going on. \n\nConsider the following code\n```js\nconst findLUSlength = \n  (a,b)=> \n    a===b \n    ? -1\n    : Math.max(a.length, b.length)​\n```\nI wrote those codes hours ago, now I am converting it to 8 width indentation:\n\n```js\nconst findLUSlength = \n        (a,b)=> \n                a===b \n                        ? -1\n                        : Math.max(a.length, b.length)​\n```\n\nIt looks more straightforward to me, my eyes feel more focused on a ​single function level scope, and that could be necessary for codes without curly braces. \n\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-18-enlarge-indentation-in-functional-programming/"},"frontmatter":{"title":"Enlarge indentation in functional programming","tags":["coding","functional programming"],"date":"2017-08-18T19:22:49-04:00"}}},{"node":{"id":"9b020d18-56a4-58b5-8acd-a6f47bf96324","excerpt":"And an illustration of a simple object:","timeToRead":1,"internal":{"content":"```js\nfunction outer() {\n\tvar one = 1;\n\tvar two = 2;\n\n\treturn function inner(){\n\t\treturn one + two;\n\t};\n}\n\nconst three = outer();\n\nthree();\t\t\t// 3\n```\n\n\nAnd an illustration of a simple object:\n\n\n\n```js\nconst obj = {\n\tone: 1,\n\ttwo: 2\n};\n\nfunction three(outer) {\n\treturn outer.one + outer.two;\n}\n\nthree( obj );\t\t// 3\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-18-closure-scope-vs-object-scope/"},"frontmatter":{"title":"Closure scope vs. Object scope","tags":["javascript","functional programming"],"date":"2017-08-18T16:52:25-04:00"}}},{"node":{"id":"b54c1f7b-386e-5668-b0fe-ac7e8eaa0576","excerpt":"the programmers spend 70% of their time not coding but reading and understanding the codes. ","timeToRead":1,"internal":{"content":"> the programmers spend 70% of their time not coding but reading and understanding the codes. \n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-17-understanding-the-codes/"},"frontmatter":{"title":"Understanding the codes","tags":["quote","coding"],"date":"2017-08-17T15:41:40-04:00"}}},{"node":{"id":"1a93e98a-a0c4-5d62-bc09-a3ef3f964c4a","excerpt":"","timeToRead":1,"internal":{"content":"```js\nconst foo = (a, b, ...c) => ({ a, b, c })\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-08-17-wrap-the-returning-object-up-after-arrow-functions-with-parenthesis/"},"frontmatter":{"title":"Wrap the returning object up after arrow functions with parenthesis","tags":["javascript"],"date":"2017-08-17T15:24:55-04:00"}}},{"node":{"id":"72beb9fc-3510-5c13-aa12-e512b11c47a1","excerpt":"Just checked out the scala official doc, apparently they put the to-javascript compiler on the front page, which gives a pretty clean peek…","timeToRead":1,"internal":{"content":"Just checked out the scala official doc, apparently they put the to-javascript compiler on the front page, which gives a pretty clean peek of the things Scala can possibly make javascript better. And as always, like the reset of compiling-to-js-from-a-better-languages world, Scala has some better solutions for typed system, collections, class syntaxs, etc. Also, the [Scala.js doc](https://www.scala-js.org/) looks pretty neat!\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-14-languages-tend-to-replace-javascript/"},"frontmatter":{"title":"Scala, a good choice to replace javascript","tags":["javascript","scala"],"date":"2017-08-14T15:39:20-04:00"}}},{"node":{"id":"22114c28-421d-50b0-bb83-bd0e1845a563","excerpt":"I love functional programming(FP), but at the same time, it makes me tend to reach more space and time in computing.  As one of the core…","timeToRead":2,"internal":{"content":"I love functional programming(FP), but at the same time, it makes me tend to reach more space and time in computing. \n\nAs one of the core principles in FP, is avoiding declaring variables, not even temporary variables. Which means all the data are supposed to be taken from the arguments. And so in Javascript, functional programmers tend to avoid `for` looping and make the best use of `Array.prototype.map`, `Array.prototype.reduce`(my favorite), etc., and loop the iterators without touching the variables out of the function's scope. \n\nIn this example, the algorithm is for determining whether an array of numbers has duplicate elements.\n\n```js\n// []int -> bool\nconst containsDuplicate = nums => nums.reduce((acc,cur)=>{\n  if (acc.stack.includes(cur)) acc.bool = true\n  acc.stack.push(cur)\n  return acc\n}, { \n  bool: false, stack: []\n}).bool\n```\nClean, functional programming right? not declaring a single variable​ and takes one input, gives one output. `reduce` and shorten the argument from an array to boolean. \n\nAnd yet, it has to eat all the elements from that array and push all of them into accelerator's stack, while if you declared a temp Set on a higher scope and looping by `forEach` or ordinary `for`, you could jump out the first time you meet the duplicated element in the middle of looping, which, clearly makes more sense.\n\n\n\n```js\nconst containsDuplicate = nums => {\n  let set = new Set()\n  let flag = false\n  nums.forEach(e=>{\n    if (set.has(e)) flag = true\n    set.add(e)\n  })\n  return flag\n}\n```\n\n\n> Note: There is no way to stop or break a forEach\\(\\) loop other than by throwing an exception. If you need such behaviour,  the .forEach\\(\\) method is the wrong tool, use a plain loop instead. If you are testing the array elements for a predicate  and need a boolean return value, you can use every\\(\\) or some\\(\\) instead.\n> <cite>-- MDN</cite>\n\nSo, the more reasonable way would still be the boring `for` loop, which allows you jump out from the middle.\n\n\n```js\nconst containDuplicate = nums => {\n  let set = new Set()\n  for (let i =0; i<nums.length; i++){\n    if (set.has(nums[i])) return true\n    set.add(nums[i])\n  }\n  return false\n}\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-11-functional-programming-makes-imperfect-algorithm/"},"frontmatter":{"title":"Functional programming makes imperfect algorithm","tags":["functional programming","javascript"],"date":"2017-08-11T01:56:57-04:00"}}},{"node":{"id":"395720bb-ad66-5f24-9686-cf67b67ea2a2","excerpt":"","timeToRead":1,"internal":{"content":"```js\n// Set => Array\n[...Set]\n\n// String => Array\n[...String]\n\n// Array => Array\n[...Array]\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-09-from-iterator-to-array-use-spread-operator/"},"frontmatter":{"title":"From iterators, to Array, use spread operator","tags":["javascript"],"date":"2017-08-09T18:47:11-04:00"}}},{"node":{"id":"ba0ccb93-38fa-54e5-8101-f7719621f24b","excerpt":"Ref:  https://leetcode.com/problems/find-the-difference/description/","timeToRead":1,"internal":{"content":"```js\nconst findTheDifference = (s, t) => {\n  let hash = {}\n  for (let v of [...t]) {\n    hash[v] ? hash[v]++ : (hash[v] = 1)\n  }\n  for (let v of [...s]) {\n    hash[v]--\n  }\n  for (let key in hash) {\n    if(hash[key] === 1) return key\n  }\n}\n```\n\nRef: https://leetcode.com/problems/find-the-difference/description/\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-08-javascript-hash-table/"},"frontmatter":{"title":"Javascript Hash Table","tags":["javascript","algorithm"],"date":"2017-08-08T03:32:30-04:00"}}},{"node":{"id":"f61d9d06-4d23-53bf-bd87-3c6a378e3e2b","excerpt":"So, if you want to check if two arrays are equal, you might want  Well, by that you would probably assume two trues come back, but actually…","timeToRead":1,"internal":{"content":"So, if you want to check if two arrays are equal, you might want \n```js\n[]===[]\n\n// or\n\n[1,2,3]===[1,2,3]\n```\n\nWell, by that you would probably assume two trues come back, but actually, you are going to get false and false.\n\nso, better use join() so you can compare strings.\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-08-dont-compare-two-arrays-with/"},"frontmatter":{"title":"Don't compare two arrays with ===","tags":["javascript","array"],"date":"2017-08-07T23:16:33-04:00"}}},{"node":{"id":"5acd3946-ffba-5b1b-8a92-ee002e781b97","excerpt":"Hello, my name is Song Wang. I am a full-stack software engineer at  TuSimple , living in  Beijing ,  Chengdu ,  Yokohama ,  New York , San…","timeToRead":1,"internal":{"content":"Hello, my name is Song Wang.\n\nI am a full-stack software engineer at [TuSimple](http://www.tusimple.com/), living in ~~Beijing~~, ~~Chengdu~~, ~~Yokohama~~, ~~New York~~, San Diego.\n\nI code Javascript, Python and Go; I'm also digging Lua, Vim Script.\n\nI love open source, and I contribute from [my Github](https://github.com/wangsongiam/) as a hobby.\n\nI am a [top 5% fastest](https://www.keyhero.com/profile/user67157/) typist in the world.\n\n## About songwang.io\n\nThis is my blog site, with a focus on simplicity and performance. It was built with Jekyll and got migrated to Gatsby. It's also coded in the functional paradigm and fully [open sourced](https://github.com/wangsongiam/songwang.io).\n\nWhile the site is about expressing myself through words, the UI and codes are also carrying my reflections.\n"},"headings":[{"value":"About songwang.io"}],"fields":{"slug":"/about/"},"frontmatter":{"title":"About","tags":null,"date":"2017-08-06"}}},{"node":{"id":"939854cd-da9d-524c-bf74-565b07174aa2","excerpt":"","timeToRead":1,"internal":{"content":"```js\nstr.split('') => [...str]\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-08-04-spread-operator-trumps-stringsplit/"},"frontmatter":{"title":"Spread operator trumps string.split('')","tags":["javascript"],"date":"2017-08-04T22:21:46-04:00"}}},{"node":{"id":"2110dc3e-a420-5e6e-858d-815b5fe1aef4","excerpt":"Imagine​ filling out an empty 2d array with this wtf? I just assigned once! better use map instead","timeToRead":1,"internal":{"content":"Imagine​ filling out an empty 2d array with this\n\n```js\nlet emptyTwoD = Array(3).fill(Array(3).fill(''))\n// emptyTwoD = [['','','']['','','']['','','']]\n\n// tring to change on spot \nemptyTwoD[1][1] = 3\n// emptyTwoD = [['', 3,'']['', 3,'']['', 3,'']]\n\n```\nwtf? I just assigned once!\n\n\nbetter use map instead\n\n```js\nlet emptyTwoD = Array(3).fill('').map(e=>Array(3).fill(''))\n\nemptyTwoD[1][1] = 3\n// emptyTwoD = [['','','']['', 3,'']['', '','']]\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-08-04-be-careful-call-backing-arrayfill/"},"frontmatter":{"title":"Be careful call backing array.fill()","tags":["javascript"],"date":"2017-08-04T20:00:16-04:00"}}},{"node":{"id":"43a78ad5-5a6c-5b0f-b525-2634f553a950","excerpt":"","timeToRead":1,"internal":{"content":"```js\nconst constructTwoD = ( columnNumber, rowNumber ) => [...Array(rowNumber)].map(row=>Array(columnNumber))\n\nconstructTwoD(2,3)\n// => [[ , , ], [ , , ]]\n```\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-04-creating-2d-array-the-es6-way/"},"frontmatter":{"title":"Creating 2d Array the ES6 way","tags":["javascript"],"date":"2017-08-04T17:19:14-04:00"}}},{"node":{"id":"dda0fe62-83ac-5723-b170-c291fef9c956","excerpt":"​I love both closure and arrow function; I take one for simplified class and one for simplified function syntax. After a try, I found that…","timeToRead":1,"internal":{"content":"​I love both closure and arrow function; I take one for simplified class and one for simplified function syntax. After a try, I found that they don't like each other.\n\n\nI was imagining this \n```js\nconst makeEmployee = name =>  \n  function getName () {\n      return name\n    }\n```\nor \n\n```js\nconst makeEmployee =\n  name => () => name\n\n```\n\nwould work like \n\n```\nconst makeEmployee = name => {\n  return {\n    getName() {\n      return name\n    }\n  }\n}\n```\n\nbut apparently, arrow functions are made for one liner things, not without a function name or returning a normal function.\n"},"headings":[],"fields":{"slug":"/blog/2017-08-03-dont-use-arrow-function-for-closure/"},"frontmatter":{"title":"Don't use arrow function for closure","tags":["javascript"],"date":"2017-08-03T16:49:59-04:00"}}},{"node":{"id":"812a46ea-6116-54a1-8b64-cc719026559c","excerpt":"Bad: Good: ","timeToRead":1,"internal":{"content":"Bad:\n```js\nif (fsm.state==='fetching'&&isEmpty(listNode)) {\n  // ...\n}\n```\n\nGood: \n```js\nfunctionshouldShowSpinner(fsm, listNode) {\n  returnfsm.state==='fetching'&&isEmpty(listNode);\n}\n\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-03-better-encapsulate-conditionals/"},"frontmatter":{"title":"Better encapsulate conditionals","tags":["coding"],"date":"2017-08-03T15:53:05-04:00"}}},{"node":{"id":"cef27115-e96a-5e25-a56a-dd0c238cdc9d","excerpt":"Bad Good","timeToRead":1,"internal":{"content":"Bad\n\n```js\nfunctioncreateMicrobrewery(name) {\n  constbreweryName= name ||'Hipster Brew Co.';\n  // ...\n}\n```\n\nGood\n\n```js\nfunctioncreateMicrobrewery(breweryName='Hipster Brew Co.') {\n  // ...\n}\n```\n\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-08-03-use-default-arguments-instead-of-conditionals/"},"frontmatter":{"title":"Use default arguments instead of conditionals","tags":["javascript"],"date":"2017-08-03T14:33:21-04:00"}}},{"node":{"id":"2addb676-5cd6-597f-9f65-8bea7bb6f27d","excerpt":"The following   and   are block level elements, not inline level element as usual. ","timeToRead":1,"internal":{"content":"The following `span` and `small` are block level elements, not inline level element as usual. \n```html\n<div style=\"display: flex;\">\n  <span>block level</span>\n  <small>not inline</small>\n</div>\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-07-30-impossible-to-have-inline-elements-in-flex-box/"},"frontmatter":{"title":"Impossible to have inline elements in flex box","tags":["CSS"],"date":"2017-07-29T23:19:43-04:00"}}},{"node":{"id":"767c0bc7-547e-5db7-9339-f94dbdcb8492","excerpt":"Apparently, in declaring an obj, a child cannot be assign or refer to another child within the same obj which is being declared.  Instead…","timeToRead":1,"internal":{"content":"Apparently, in declaring an obj, a child cannot be assign or refer to another child within the same obj which is being declared. \n\n```js\nlet obj = {\n  a: 1,\n  b: 3,\n}\n\nconsole.log(\n  obj.c\n) \n// => undefined\n```\n\nInstead, declare function to re-access the obj like this\n```js\nlet obj2 = {\n  a: 'it',\n  b (){\n    return this.a + ' works'\n  }\n}\n\nconsole.log(\n  obj2.b()\n)\n// => it works\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-29-dont-refer-a-child-from-another-child-when-declaring-an-obj/"},"frontmatter":{"title":"Don't refer a child from another child when declaring an obj","tags":["javascript"],"date":"2017-07-29T20:11:11-04:00"}}},{"node":{"id":"4007ff07-2cf7-5dc6-947f-674ac4e93cf5","excerpt":"The   and   operators must always be surrounded by whitespace. The operand of   for instance will be parsed as a percentage followed by a…","timeToRead":1,"internal":{"content":"The `+` and `-` operators must always be surrounded by whitespace. The operand of `calc(50% -8px)` for instance will be parsed as a percentage followed by a negative length, an invalid expression, while the operand of `calc(50% - 8px)` is a percentage followed by a minus sign and a length. Even further, `calc(8px + -50%)` is treated as a length followed by a plus sign and a negative percentage.\n\nRef: https://developer.mozilla.org/en-US/docs/Web/CSS/calc\n"},"headings":[],"fields":{"slug":"/blog/2017-07-29-always-use-spaces-in-calc-in-css/"},"frontmatter":{"title":"Always use spaces in calc() in CSS","tags":["CSS"],"date":"2017-07-29T19:44:55-04:00"}}},{"node":{"id":"fdd7227d-35b1-5600-bf96-fc1165974e17","excerpt":"","timeToRead":1,"internal":{"content":" \n```js\nlet a = true + ''\n//=> a: 'true'\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-07-29-adding-boolean-to-a-string-returns-a-string/"},"frontmatter":{"title":"Adding Boolean to a string returns a string","tags":["javascript"],"date":"2017-07-29T04:00:37-04:00"}}},{"node":{"id":"3f052de8-ff11-5276-ae92-28e22874f405","excerpt":"I change the default   to   in the fields of  ,  , all  ,  , to make sure my Vim’s colors are more synchronized\u001b. ","timeToRead":13,"internal":{"content":"I change the default `gui01` to `gui00` in the fields of `FoldColumn`, `Folded`, all `GitGutters`, `LineNumbers`, to make sure my Vim's colors are more synchronized\u001b. \n\n``` vim\n\" vi:syntax=vim\n\n\" base16-vim (https://github.com/chriskempson/base16-vim)\n\" by Chris Kempson (http://chriskempson.com)\n\" Ocean scheme by Chris Kempson (http://chriskempson.com)\n\n\" This enables the coresponding base16-shell script to run so that\n\" :colorscheme works in terminals supported by base16-shell scripts\n\" User must set this variable in .vimrc\n\"   let g:base16_shell_path=base16-builder/output/shell/\nif !has('gui_running')\n  if exists(\"g:base16_shell_path\")\n    execute \"silent !/bin/sh \".g:base16_shell_path.\"/base16-ocean.sh\"\n  endif\nendif\n\n\" GUI color definitions\nlet s:gui00 = \"2b303b\"\nlet s:gui01 = \"343d46\"\nlet s:gui02 = \"4f5b66\"\nlet s:gui03 = \"65737e\"\nlet s:gui04 = \"a7adba\"\nlet s:gui05 = \"c0c5ce\"\nlet s:gui06 = \"dfe1e8\"\nlet s:gui07 = \"eff1f5\"\nlet s:gui08 = \"bf616a\"\nlet s:gui09 = \"d08770\"\nlet s:gui0A = \"ebcb8b\"\nlet s:gui0B = \"a3be8c\"\nlet s:gui0C = \"96b5b4\"\nlet s:gui0D = \"8fa1b3\"\nlet s:gui0E = \"b48ead\"\nlet s:gui0F = \"ab7967\"\n\n\" Terminal color definitions\nlet s:cterm00 = \"00\"\nlet s:cterm03 = \"08\"\nlet s:cterm05 = \"07\"\nlet s:cterm07 = \"15\"\nlet s:cterm08 = \"01\"\nlet s:cterm0A = \"03\"\nlet s:cterm0B = \"02\"\nlet s:cterm0C = \"06\"\nlet s:cterm0D = \"04\"\nlet s:cterm0E = \"05\"\nif exists('base16colorspace') && base16colorspace == \"256\"\n  let s:cterm01 = \"18\"\n  let s:cterm02 = \"19\"\n  let s:cterm04 = \"20\"\n  let s:cterm06 = \"21\"\n  let s:cterm09 = \"16\"\n  let s:cterm0F = \"17\"\nelse\n  let s:cterm01 = \"10\"\n  let s:cterm02 = \"11\"\n  let s:cterm04 = \"12\"\n  let s:cterm06 = \"13\"\n  let s:cterm09 = \"09\"\n  let s:cterm0F = \"14\"\nendif\n\n\" Neovim terminal colours\nif has(\"nvim\")\n  let g:terminal_color_0 =  \"#2b303b\"\n  let g:terminal_color_1 =  \"#bf616a\"\n  let g:terminal_color_2 =  \"#a3be8c\"\n  let g:terminal_color_3 =  \"#ebcb8b\"\n  let g:terminal_color_4 =  \"#8fa1b3\"\n  let g:terminal_color_5 =  \"#b48ead\"\n  let g:terminal_color_6 =  \"#96b5b4\"\n  let g:terminal_color_7 =  \"#c0c5ce\"\n  let g:terminal_color_8 =  \"#65737e\"\n  let g:terminal_color_9 =  \"#d08770\"\n  let g:terminal_color_10 = \"#343d46\"\n  let g:terminal_color_11 = \"#4f5b66\"\n  let g:terminal_color_12 = \"#a7adba\"\n  let g:terminal_color_13 = \"#dfe1e8\"\n  let g:terminal_color_14 = \"#ab7967\"\n  let g:terminal_color_15 = \"#eff1f5\"\n  let g:terminal_color_background = g:terminal_color_0\n  let g:terminal_color_foreground = g:terminal_color_7\n  if &background == \"light\"\n    let g:terminal_color_background = g:terminal_color_7\n    let g:terminal_color_foreground = g:terminal_color_2\n  endif\nendif\n\n\" Theme setup\nhi clear\nsyntax reset\nlet g:colors_name = \"base16-ocean\"\n\n\" Highlighting function\nfun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr, guisp)\n  if a:guifg != \"\"\n    exec \"hi \" . a:group . \" guifg=#\" . a:guifg\n  endif\n  if a:guibg != \"\"\n    exec \"hi \" . a:group . \" guibg=#\" . a:guibg\n  endif\n  if a:ctermfg != \"\"\n    exec \"hi \" . a:group . \" ctermfg=\" . a:ctermfg\n  endif\n  if a:ctermbg != \"\"\n    exec \"hi \" . a:group . \" ctermbg=\" . a:ctermbg\n  endif\n  if a:attr != \"\"\n    exec \"hi \" . a:group . \" gui=\" . a:attr . \" cterm=\" . a:attr\n  endif\n  if a:guisp != \"\"\n    exec \"hi \" . a:group . \" guisp=#\" . a:guisp\n  endif\nendfun\n\n\" Vim editor colors\ncall <sid>hi(\"Normal\",        s:gui05, s:gui00, s:cterm05, s:cterm00, \"\", \"\")\ncall <sid>hi(\"Bold\",          \"\", \"\", \"\", \"\", \"bold\", \"\")\ncall <sid>hi(\"Debug\",         s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"Directory\",     s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"Error\",         s:gui00, s:gui08, s:cterm00, s:cterm08, \"\", \"\")\ncall <sid>hi(\"ErrorMsg\",      s:gui08, s:gui00, s:cterm08, s:cterm00, \"\", \"\")\ncall <sid>hi(\"Exception\",     s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"FoldColumn\",    s:gui0C, s:gui00, s:cterm0C, s:cterm00, \"\", \"\")\ncall <sid>hi(\"Folded\",        s:gui03, s:gui00, s:cterm03, s:cterm00, \"\", \"\")\ncall <sid>hi(\"IncSearch\",     s:gui01, s:gui09, s:cterm01, s:cterm09, \"none\", \"\")\ncall <sid>hi(\"Italic\",        \"\", \"\", \"\", \"\", \"none\", \"\")\ncall <sid>hi(\"Macro\",         s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"MatchParen\",    \"\", s:gui03, \"\", s:cterm03,  \"\", \"\")\ncall <sid>hi(\"ModeMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"MoreMsg\",       s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"Question\",      s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"Search\",        s:gui03, s:gui0A, s:cterm03, s:cterm0A,  \"\", \"\")\ncall <sid>hi(\"SpecialKey\",    s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"TooLong\",       s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"Underlined\",    s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"Visual\",        \"\", s:gui02, \"\", s:cterm02, \"\", \"\")\ncall <sid>hi(\"VisualNOS\",     s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"WarningMsg\",    s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"WildMenu\",      s:gui08, s:gui0A, s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"Title\",         s:gui0D, \"\", s:cterm0D, \"\", \"none\", \"\")\ncall <sid>hi(\"Conceal\",       s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\", \"\")\ncall <sid>hi(\"Cursor\",        s:gui00, s:gui05, s:cterm00, s:cterm05, \"\", \"\")\ncall <sid>hi(\"NonText\",       s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"LineNr\",        s:gui03, s:gui00, s:cterm03, s:cterm00, \"\", \"\")\ncall <sid>hi(\"SignColumn\",    s:gui03, s:gui00, s:cterm03, s:cterm00, \"\", \"\")\ncall <sid>hi(\"StatusLine\",    s:gui04, s:gui00, s:cterm04, s:cterm00, \"none\", \"\")\ncall <sid>hi(\"StatusLineNC\",  s:gui03, s:gui00, s:cterm03, s:cterm00, \"none\", \"\")\ncall <sid>hi(\"VertSplit\",     s:gui02, s:gui00, s:cterm02, s:cterm00, \"none\", \"\")\ncall <sid>hi(\"ColorColumn\",   \"\", s:gui01, \"\", s:cterm01, \"none\", \"\")\ncall <sid>hi(\"CursorColumn\",  \"\", s:gui01, \"\", s:cterm01, \"none\", \"\")\ncall <sid>hi(\"CursorLine\",    \"\", s:gui01, \"\", s:cterm01, \"none\", \"\")\ncall <sid>hi(\"CursorLineNr\",  s:gui04, s:gui01, s:cterm04, s:cterm01, \"\", \"\")\ncall <sid>hi(\"QuickFixLine\",  \"\", s:gui01, \"\", s:cterm01, \"none\", \"\")\ncall <sid>hi(\"PMenu\",         s:gui05, s:gui01, s:cterm05, s:cterm01, \"none\", \"\")\ncall <sid>hi(\"PMenuSel\",      s:gui01, s:gui05, s:cterm01, s:cterm05, \"\", \"\")\ncall <sid>hi(\"TabLine\",       s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\", \"\")\ncall <sid>hi(\"TabLineFill\",   s:gui03, s:gui01, s:cterm03, s:cterm01, \"none\", \"\")\ncall <sid>hi(\"TabLineSel\",    s:gui0B, s:gui01, s:cterm0B, s:cterm01, \"none\", \"\")\n\n\" Standard syntax highlighting\ncall <sid>hi(\"Boolean\",      s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\ncall <sid>hi(\"Character\",    s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"Comment\",      s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"Conditional\",  s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"Constant\",     s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\ncall <sid>hi(\"Define\",       s:gui0E, \"\", s:cterm0E, \"\", \"none\", \"\")\ncall <sid>hi(\"Delimiter\",    s:gui0F, \"\", s:cterm0F, \"\", \"\", \"\")\ncall <sid>hi(\"Float\",        s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\ncall <sid>hi(\"Function\",     s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"Identifier\",   s:gui08, \"\", s:cterm08, \"\", \"none\", \"\")\ncall <sid>hi(\"Include\",      s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"Keyword\",      s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"Label\",        s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"Number\",       s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\ncall <sid>hi(\"Operator\",     s:gui05, \"\", s:cterm05, \"\", \"none\", \"\")\ncall <sid>hi(\"PreProc\",      s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"Repeat\",       s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"Special\",      s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\ncall <sid>hi(\"SpecialChar\",  s:gui0F, \"\", s:cterm0F, \"\", \"\", \"\")\ncall <sid>hi(\"Statement\",    s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"StorageClass\", s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"String\",       s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"Structure\",    s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"Tag\",          s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"Todo\",         s:gui0A, s:gui01, s:cterm0A, s:cterm01, \"\", \"\")\ncall <sid>hi(\"Type\",         s:gui0A, \"\", s:cterm0A, \"\", \"none\", \"\")\ncall <sid>hi(\"Typedef\",      s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\n\n\" C highlighting\ncall <sid>hi(\"cOperator\",   s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\ncall <sid>hi(\"cPreCondit\",  s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\n\n\" C# highlighting\ncall <sid>hi(\"csClass\",                 s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"csAttribute\",             s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"csModifier\",              s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"csType\",                  s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"csUnspecifiedStatement\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"csContextualStatement\",   s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"csNewDecleration\",        s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\n\n\" CSS highlighting\ncall <sid>hi(\"cssBraces\",      s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"cssClassName\",   s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"cssColor\",       s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\n\n\" Diff highlighting\ncall <sid>hi(\"DiffAdd\",      s:gui0B, s:gui01,  s:cterm0B, s:cterm01, \"\", \"\")\ncall <sid>hi(\"DiffChange\",   s:gui03, s:gui01,  s:cterm03, s:cterm01, \"\", \"\")\ncall <sid>hi(\"DiffDelete\",   s:gui08, s:gui01,  s:cterm08, s:cterm01, \"\", \"\")\ncall <sid>hi(\"DiffText\",     s:gui0D, s:gui01,  s:cterm0D, s:cterm01, \"\", \"\")\ncall <sid>hi(\"DiffAdded\",    s:gui0B, s:gui00,  s:cterm0B, s:cterm00, \"\", \"\")\ncall <sid>hi(\"DiffFile\",     s:gui08, s:gui00,  s:cterm08, s:cterm00, \"\", \"\")\ncall <sid>hi(\"DiffNewFile\",  s:gui0B, s:gui00,  s:cterm0B, s:cterm00, \"\", \"\")\ncall <sid>hi(\"DiffLine\",     s:gui0D, s:gui00,  s:cterm0D, s:cterm00, \"\", \"\")\ncall <sid>hi(\"DiffRemoved\",  s:gui08, s:gui00,  s:cterm08, s:cterm00, \"\", \"\")\n\n\" Git highlighting\ncall <sid>hi(\"gitcommitOverflow\",       s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitSummary\",        s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitComment\",        s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitUntracked\",      s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitDiscarded\",      s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitSelected\",       s:gui03, \"\", s:cterm03, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitHeader\",         s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitSelectedType\",   s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitUnmergedType\",   s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitDiscardedType\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitBranch\",         s:gui09, \"\", s:cterm09, \"\", \"bold\", \"\")\ncall <sid>hi(\"gitcommitUntrackedFile\",  s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"gitcommitUnmergedFile\",   s:gui08, \"\", s:cterm08, \"\", \"bold\", \"\")\ncall <sid>hi(\"gitcommitDiscardedFile\",  s:gui08, \"\", s:cterm08, \"\", \"bold\", \"\")\ncall <sid>hi(\"gitcommitSelectedFile\",   s:gui0B, \"\", s:cterm0B, \"\", \"bold\", \"\")\n\n\" GitGutter highlighting\ncall <sid>hi(\"GitGutterAdd\",     s:gui0B, s:gui00, s:cterm0B, s:cterm00, \"\", \"\")\ncall <sid>hi(\"GitGutterChange\",  s:gui0D, s:gui00, s:cterm0D, s:cterm00, \"\", \"\")\ncall <sid>hi(\"GitGutterDelete\",  s:gui08, s:gui00, s:cterm08, s:cterm00, \"\", \"\")\ncall <sid>hi(\"GitGutterChangeDelete\",  s:gui0E, s:gui01, s:cterm0E, s:cterm01, \"\", \"\")\n\n\" HTML highlighting\ncall <sid>hi(\"htmlBold\",    s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"htmlItalic\",  s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"htmlEndTag\",  s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"htmlTag\",     s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\n\n\" JavaScript highlighting\ncall <sid>hi(\"javaScript\",        s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"javaScriptBraces\",  s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"javaScriptNumber\",  s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\n\" pangloss/vim-javascript highlighting\ncall <sid>hi(\"jsOperator\",          s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"jsStatement\",         s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"jsReturn\",            s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"jsThis\",              s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"jsClassDefinition\",   s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"jsFunction\",          s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"jsFuncName\",          s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"jsFuncCall\",          s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"jsClassFuncName\",     s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"jsClassMethodType\",   s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"jsRegexpString\",      s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\ncall <sid>hi(\"jsGlobalObjects\",     s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"jsGlobalNodeObjects\", s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"jsExceptions\",        s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"jsBuiltins\",          s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\n\n\" Mail highlighting\ncall <sid>hi(\"mailQuoted1\",  s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"mailQuoted2\",  s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"mailQuoted3\",  s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"mailQuoted4\",  s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\ncall <sid>hi(\"mailQuoted5\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"mailQuoted6\",  s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"mailURL\",      s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"mailEmail\",    s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\n\n\" Markdown highlighting\ncall <sid>hi(\"markdownCode\",              s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"markdownError\",             s:gui05, s:gui00, s:cterm05, s:cterm00, \"\", \"\")\ncall <sid>hi(\"markdownCodeBlock\",         s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"markdownHeadingDelimiter\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\n\n\" NERDTree highlighting\ncall <sid>hi(\"NERDTreeDirSlash\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"NERDTreeExecFile\",  s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\n\n\" PHP highlighting\ncall <sid>hi(\"phpMemberSelector\",  s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"phpComparison\",      s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\ncall <sid>hi(\"phpParent\",          s:gui05, \"\", s:cterm05, \"\", \"\", \"\")\n\n\" Python highlighting\ncall <sid>hi(\"pythonOperator\",  s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"pythonRepeat\",    s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"pythonInclude\",   s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"pythonStatement\", s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\n\n\" Ruby highlighting\ncall <sid>hi(\"rubyAttribute\",               s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\ncall <sid>hi(\"rubyConstant\",                s:gui0A, \"\", s:cterm0A, \"\", \"\", \"\")\ncall <sid>hi(\"rubyInterpolationDelimiter\",  s:gui0F, \"\", s:cterm0F, \"\", \"\", \"\")\ncall <sid>hi(\"rubyRegexp\",                  s:gui0C, \"\", s:cterm0C, \"\", \"\", \"\")\ncall <sid>hi(\"rubySymbol\",                  s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\ncall <sid>hi(\"rubyStringDelimiter\",         s:gui0B, \"\", s:cterm0B, \"\", \"\", \"\")\n\n\" SASS highlighting\ncall <sid>hi(\"sassidChar\",     s:gui08, \"\", s:cterm08, \"\", \"\", \"\")\ncall <sid>hi(\"sassClassChar\",  s:gui09, \"\", s:cterm09, \"\", \"\", \"\")\ncall <sid>hi(\"sassInclude\",    s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"sassMixing\",     s:gui0E, \"\", s:cterm0E, \"\", \"\", \"\")\ncall <sid>hi(\"sassMixinName\",  s:gui0D, \"\", s:cterm0D, \"\", \"\", \"\")\n\n\" Signify highlighting\ncall <sid>hi(\"SignifySignAdd\",     s:gui0B, s:gui01, s:cterm0B, s:cterm01, \"\", \"\")\ncall <sid>hi(\"SignifySignChange\",  s:gui0D, s:gui01, s:cterm0D, s:cterm01, \"\", \"\")\ncall <sid>hi(\"SignifySignDelete\",  s:gui08, s:gui01, s:cterm08, s:cterm01, \"\", \"\")\n\n\" Spelling highlighting\ncall <sid>hi(\"SpellBad\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\", s:gui08)\ncall <sid>hi(\"SpellLocal\",   \"\", s:gui00, \"\", s:cterm00, \"undercurl\", s:gui0C)\ncall <sid>hi(\"SpellCap\",     \"\", s:gui00, \"\", s:cterm00, \"undercurl\", s:gui0D)\ncall <sid>hi(\"SpellRare\",    \"\", s:gui00, \"\", s:cterm00, \"undercurl\", s:gui0E)\n\n\" Remove functions\ndelf <sid>hi\n\n\" Remove color variables\nunlet s:gui00 s:gui01 s:gui02 s:gui03  s:gui04  s:gui05  s:gui06  s:gui07  s:gui08  s:gui09 s:gui0A  s:gui0B  s:gui0C  s:gui0D  s:gui0E  s:gui0F\nunlet s:cterm00 s:cterm01 s:cterm02 s:cterm03 s:cterm04 s:cterm05 s:cterm06 s:cterm07 s:cterm08 s:cterm09 s:cterm0A s:cterm0B s:cterm0C s:cterm0D s:cterm0E s:cterm0F\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-27-tweaked-base16-color-scheme-for-less-distraction/"},"frontmatter":{"title":"Tweaked base16 color scheme for less distraction","tags":["productivity","vim","neovim"],"date":"2017-07-27T14:08:56-04:00"}}},{"node":{"id":"5c3314e9-f9eb-5033-a0b1-58fcbee3c4e1","excerpt":"","timeToRead":1,"internal":{"content":"![newest screenshot of my terminal](images/uploads/Screen%20Shot%202017-07-27%20at%202.03.21%20PM.png)\n"},"headings":[],"fields":{"slug":"/blog/2017-07-27-i-hided-line-numbers-in-vim-for-less-distraction/"},"frontmatter":{"title":"I hided line numbers in Vim for less distraction","tags":["vim","terminal","productivity","neovim","tmux"],"date":"2017-07-27T14:03:00-04:00"}}},{"node":{"id":"e8a3096c-bcd2-53b6-bdbc-0514fb6cde37","excerpt":"Let me show you some handy combination empowered by Vim keys. Start editing at the end of the word you are currently focusing Start editing…","timeToRead":1,"internal":{"content":"Let me show you some handy combination empowered by Vim keys.\n\n###  Start editing at the end of the word you are currently focusing\n```\nea\n```\n\n### Start editing at the beginning of the current word\n```\nbi\n```\n\n### Changed till the next space \n```\ncE\n```\n\n### Change till \n\n\n\n\n\n"},"headings":[{"value":"Start editing at the end of the word you are currently focusing"},{"value":"Start editing at the beginning of the current word"},{"value":"Changed till the next space"},{"value":"Change till"}],"fields":{"slug":"/blog/2017-07-27-vim-combos/"},"frontmatter":{"title":"Vim combos ","tags":["vim","neovim","productivity"],"date":"2017-07-26T17:26:09-04:00"}}},{"node":{"id":"844998e1-2df3-5fa9-a99b-d498c76ea231","excerpt":"Let me just say this: CVim wins, hands down. I would say that the default settings from Vimium are more friendly to new in-browser vim users…","timeToRead":3,"internal":{"content":"Let me just say this: CVim wins, hands down.\n\nI would say that the default settings from Vimium are more friendly to new in-browser vim users(less nerdy bars, smooth scrolling, etc.), but for advanced users, no smooth scroll feels more natural. And critically, Cvim can search strings with highlighting all the possibilities, which, Vimium has never accomplished(they claimed that it is a Chrome issue and I bought it, but who knows now...).\n\n## Demos\n\n\n### Open a url\n![url opening](images/uploads/Screen%20Shot%202017-07-26%20at%202.11.21%20PM.png)\n\n### Open from buffer\n![buffer opening](images/uploads/Screen%20Shot%202017-07-26%20at%202.11.37%20PM.png)\n\n### Open from history\n![image opening](images/uploads/Screen%20Shot%202017-07-26%20at%202.12.14%20PM.png)\n\n### Highlighting all the possibilities\n![highlighting](images/uploads/Screen%20Shot%202017-07-26%20at%203.04.04%20PM.png)\n\n## Cvim config:\n```\nset nosmoothscroll\nset noautofocus\nlet scrollstep = 80\nset typelinkhints\nlet hintcharacters = \"sadfjklewcmpgh\"\nmap h gT\nmap l gt\nmap H g0\nmap L g$\nmap q lastClosedTab\nmap w closeTab\nmap J goBack\nmap K goForward\nmap gb lastUsedTab\n```\n## Styling\n\n```css\n#cVim-command-bar, #cVim-command-bar-mode, #cVim-command-bar-input, #cVim-command-bar-search-results,\n.cVim-completion-item, .cVim-completion-item .cVim-full, .cVim-completion-item .cVim-left,\n.cVim-completion-item .cVim-right {\n  font-family: Helvetica, Helvetica Neue, Neue, sans-serif, monospace, Arial;\n  font-size: 16pt !important;\n  -webkit-font-smoothing: antialiased !important;\n}\n\n#cVim-command-bar {\n  position: fixed;\n  z-index: 2147483646;\n  color: #1b1d1e;\n  background-color: #bbb;\n  display: none;\n  box-sizing: content-box;\n  box-shadow: 0 3px 3px rgba(0,0,0,0.4);\n  left: 0;\n  width: 100%;\n  height: 40px;\n}\n\n#cVim-command-bar-mode {\n  display: inline-block;\n  vertical-align: middle;\n  box-sizing: border-box;\n  padding-left: 2px;\n  height: 100%;\n  width: 10px;\n  padding-top: 2px;\n  color: #888;\n}\n\n#cVim-command-bar-input {\n  color: #1b1d1e;\n  background-color: #bbb;\n  height: 100%;\n  right: 0;\n  top: 0;\n  width: calc(100% - 40px);\n  position: absolute;\n}\n\n#cVim-command-bar-search-results {\n  position: fixed;\n  width: 100%;\n  overflow: hidden;\n  z-index: 2147483647;\n  left: 0;\n  box-shadow: 0 3px 3px rgba(0,0,0,0.4);\n  background-color: #bbb;\n}\n\n.cVim-completion-item, .cVim-completion-item .cVim-full, .cVim-completion-item .cVim-left, .cVim-completion-item .cVim-right {\n  text-overflow: ellipsis;\n  padding: 1px;\n  display: inline-block;\n  box-sizing: border-box;\n  vertical-align: middle;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.cVim-completion-item:nth-child(even) {\n  background-color: #bbc;\n}\n\n.cVim-completion-item {\n  width: 100%; left: 0;\n  color: #bcbcbc;\n}\n\n.cVim-completion-item[active] {\n  width: 100%; left: 0;\n  color: #1b1d1e;\n  background-color: #f1f1f1;\n}\n\n.cVim-completion-item[active] span {\n  color: #1b1d1e;\n}\n\n.cVim-completion-item .cVim-left {\n  color: #1b1d1e;\n  width: 37%;\n}\n\n.cVim-completion-item .cVim-right {\n  font-style: italic;\n  color: #888;\n  width: 57%;\n}\n\n\n#cVim-link-container, .cVim-link-hint,\n#cVim-hud, #cVim-status-bar {\n  font-family: Helvetica, Helvetica Neue, Neue, sans-serif, monospace, Arial;\n  font-size: 10pt !important;\n  -webkit-font-smoothing: antialiased !important;\n}\n\n#cVim-link-container {\n  position: absolute;\n  pointer-events: none;\n  width: 100%; left: 0;\n  height: 100%; top: 0;\n  z-index: 2147483647;\n}\n\n.cVim-link-hint {\n  position: absolute;\n  color: #302505 !important;\n  background-color: #ffd76e !important;\n  border-radius: 1px !important;\n  padding: 2px !important;\n  font-size: 9pt !important;\n  font-weight: bold !important;\n  text-transform: uppercase !important;\n  border: 1px solid #ad810c;\n  display: inline-block !important;\n  vertical-align: middle !important;\n  text-align: center !important;\n  box-shadow: 2px 2px 1px rgba(0,0,0,0.25) !important;\n}\n\n.cVim-link-hint_match {\n  color: #777;\n  text-transform: uppercase !important;\n}\n\n\n#cVim-hud {\n  background-color: rgba(28,28,28,0.9);\n  position: fixed !important;\n  transition: right 0.2s ease-out;\n  z-index: 24724289;\n}\n\n#cVim-hud span {\n  padding: 2px;\n  padding-left: 4px;\n  padding-right: 4px;\n  color: #8f8f8f;\n  font-size: 10pt;\n}\n\n#cVim-frames-outline {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  right: 0;\n  z-index: 9999999999;\n  box-sizing: border-box;\n  border: 3px solid yellow;\n}\n\n```\n\n\n\n"},"headings":[{"value":"Demos"},{"value":"Open a url"},{"value":"Open from buffer"},{"value":"Open from history"},{"value":"Highlighting all the possibilities"},{"value":"Cvim config:"},{"value":"Styling"}],"fields":{"slug":"/blog/2017-08-02-cvim-vs-vimium/"},"frontmatter":{"title":"Cvim vs. Vimium","tags":["vim","cvim","chrome"],"date":"2017-07-26T14:13:31-04:00"}}},{"node":{"id":"b05b8178-86be-57c2-8dd8-60461984c95b","excerpt":"I did this simply because Cvim is more powerful on all aspects. I would say that the default settings from Vimium are more friendly to new…","timeToRead":1,"internal":{"content":"I did this simply because Cvim is more powerful on all aspects. I would say that the default settings from Vimium are more friendly to new in-browser vim users(less nerdy bars, smooth scrolling, etc.), but for advanced users, no smooth scroll feels more natural.\n\nNew Cvim config:\n```\nset nosmoothscroll\nset noautofocus\nlet scrollstep = 80\nset typelinkhints\nlet hintcharacters = \"sadfjklewcmpgh\"\nmap h gT\nmap l gt\nmap H g0\nmap L g$\nmap q lastClosedTab\nmap w closeTab\nmap J goBack\nmap K goForward\nmap gb lastUsedTab\n```\n"},"headings":[],"fields":{"slug":"/blog/2017-07-26-migrated-from-vimium-to-cvim/"},"frontmatter":{"title":"Migrated from Vimium to Cvim","tags":["vim","chrome"],"date":"2017-07-26T00:00:53-04:00"}}},{"node":{"id":"190d9aa4-4d2c-5e11-93b4-80f3054dee5a","excerpt":"I spent a lot of time micro engineering and forgot to make things work first. I shouldn’t do that again. Overengineering in small parts is…","timeToRead":1,"internal":{"content":"I spent a lot of time micro engineering and forgot to make things work first. I shouldn't do that again. Overengineering in small parts is addictive to me but takes too much time for final goals. And in my current situation, where finishing matter more than refining, I will trade that off.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-23-get-things-done-first-over-engineered-second/"},"frontmatter":{"title":"Get things done first, over engineered second!","tags":["thinking"],"date":"2017-07-23T16:18:19-04:00"}}},{"node":{"id":"2b2d6284-a936-5be9-8b1c-51adba7ee82a","excerpt":"I took a look at this  tutorial  from styled components. Apparently, it uses javascript extensively, eg., uses  ,   for mixins. That’s one…","timeToRead":1,"internal":{"content":"I took a look at this [tutorial](https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md) from styled components. Apparently, it uses javascript extensively, eg., uses `object.keys`, `objects.assign` for mixins. That's one way to learn javascript I guess.​\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-22-styled-components-teaches-javascript/"},"frontmatter":{"title":"Styled components teaches javascript","tags":["javascript","design","styling"],"date":"2017-07-22T14:42:07-04:00"}}},{"node":{"id":"f3a81c96-ef30-57a5-a7ab-ddce77595c5d","excerpt":"","timeToRead":1,"internal":{"content":"```js\nlet v = 'st'\n\nlet obj = Object.assign({}, v)\n// obj = { '0': 's', '1': 't'}\n// obj['1'] = 't'\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-22-assigning-primitives-of-an-object/"},"frontmatter":{"title":"Assigning primitives of an object","tags":["object","javascript"],"date":"2017-07-22T14:20:28-04:00"}}},{"node":{"id":"3dc88648-44d2-5729-9087-dd7b108f96d9","excerpt":"","timeToRead":1,"internal":{"content":"```jade\n.tiles\n    .tile jasdklfjslkadjfsdkla\n    .tile jasdklfjslkadjfsdkla\n    .tile jasdklfjslkadjfsdkla\n    .tile jasdklfjslkadjfsdkla\n\n```\n\n```css\n.tiles {\n  position: absolute;\n  width: 1000px;\n  text-align: center;\n  border: 1px solid black;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  \n  .tile {\n  }\n}\n```\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"owrQEx\" data-default-tab=\"css,result\" data-user=\"wangsup\" data-embed-version=\"2\" data-pen-title=\"owrQEx\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/wangsup/pen/owrQEx/\">owrQEx</a> by wangsup (<a href=\"https://codepen.io/wangsup\">@wangsup</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n"},"headings":[],"fields":{"slug":"/blog/2017-07-19-centralizing-box-in-screen/"},"frontmatter":{"title":"Centralizing box in screen","tags":["CSS"],"date":"2017-07-19T16:02:26-04:00"}}},{"node":{"id":"a1b0dac0-3aab-5ba8-ace4-305298ddd00f","excerpt":"In general, it’s advised only ever to animate transform or opacity, as everything else has performance issues. ( see here )  It concerns…","timeToRead":1,"internal":{"content":"In general, it's advised only ever to animate transform or opacity, as everything else has performance issues. ([see here](https://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/)) \n\nIt concerns with the current aspects of the efficiency from GPU, which, could be fast in some ways, such as drawing.\n\n\n​\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-16-only-animate-transform-or-opacity-in-css/"},"frontmatter":{"title":"Only animate transform or opacity in CSS","tags":["CSS","design","performance"],"date":"2017-07-16T19:57:47-04:00"}}},{"node":{"id":"f8ff8026-3adc-5e33-abca-e3a751681563","excerpt":"With   the refreshing frequency will be 60fps, with less GPU usage even.","timeToRead":1,"internal":{"content":"With `window.requestAnimationFrame` the refreshing frequency will be 60fps, with less GPU usage even.\n\n![scrolling example](images/uploads/2017-07-15%2017.09.10.gif)\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <style>\n    html {\n      height: 2000px;\n    }\n  </style>\n</head>\n\n<body>\n  lol\n</body>\n<script>\n  var last_known_scroll_position = 0;\n  var ticking = false;\n\n  function doSomething(scroll_pos) {\n    console.log(\n      last_known_scroll_position\n    )\n  }\n\n  window.addEventListener('scroll', function(e) {\n    last_known_scroll_position = window.scrollY;\n    if (!ticking) {\n      window.requestAnimationFrame(function() {\n        doSomething(last_known_scroll_position);\n        ticking = false;\n      });\n    }\n    ticking = true;\n  });\n</script>\n\n</html>\n\n```\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-15-logging-the-scrolled-position-with-windowrequestanimationframe-raw/"},"frontmatter":{"title":"logging the scrolled position smoother","tags":["HTML","javascript"],"date":"2017-07-15T17:07:30-04:00"}}},{"node":{"id":"c7307d2c-ae27-5f1b-80fa-9b9bfe3eb543","excerpt":"I spend a few hours uploaded my first NPM modules,  chinese-year , which returns the Chinese zodiac animals’ list, or, the name of a…","timeToRead":1,"internal":{"content":"I spend a few hours uploaded my first NPM modules, [chinese-year](https://github.com/wangsongiam/chinese-year), which returns the Chinese zodiac animals' list, or, the name of a particular year. It's a super simple package, but it's the first NPM module I published. More on that, it has test cases I wrote with `jest`, and `Travis.ci` implementation. \n\n## Install\n```\nnpm install --save chinese-year\n```\n\n## Usage\n```js\nconst chineseYear = require('chinese-year')\nchineseYear.years\n//=> ['Rat', 'Ox', ...]\n\nchineseYear.getAnimal(2000)\n//=> 'Dragon'\n```\n\n## API\n.getAnimal(year: number):string\n.year:array\nget zodiac animal name of a year number\n\n"},"headings":[{"value":"Install"},{"value":"Usage"},{"value":"API"}],"fields":{"slug":"/blog/2017-07-15-my-first-npm-package/"},"frontmatter":{"title":"My first NPM package ","tags":["npm","javascript","package","coding"],"date":"2017-07-15T00:26:31-04:00"}}},{"node":{"id":"4a67854a-b7e2-5f94-b96c-cd141529bdbe","excerpt":"","timeToRead":1,"internal":{"content":"```js\n(function() {\n  var lastScrollY = 0;\n  var ticking = false;\n\n  var update = function() {\n    // do your stuff\n    ticking = false;\n  };\n\n  var requestTick = function() {\n    if (!ticking) {\n      window.requestAnimationFrame(update);\n      ticking = true;\n    }\n  };\n\n  var onScroll = function() {\n    lastScrollY = window.scrollY;\n    requestTick();\n  };\n\n  $(window).on('scroll', onScroll);\n})();\n```\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-14-use-requestanimationframe-to-raise-up-the-refresh-rate-and-lower-cpu-usage/"},"frontmatter":{"title":"How to raise up the refresh rate and lower CPU usage ","tags":["DOM","javascript","JQuery"],"date":"2017-07-14T13:36:10-04:00"}}},{"node":{"id":"26705e20-0208-5f8a-bf3e-12310d0bdfc1","excerpt":"If you have some messy local thing, but you want to get rid of them and update with a \u001bremote branch, and you try to do   you would get  Now…","timeToRead":1,"internal":{"content":"If you have some messy local thing, but you want to get rid of them and update with a \u001bremote branch, and you try to do `git pull` you would get \n```\nerror: Your local changes to the following files would be overwritten by merge:\n\n```\nNow, what you want is to update your local branch to the unchanged `HEAD` branch, which would have no conflict with your remote branch.\n\n```\n$ git reset --hard HEAD\n$ git pull\n```\nAnd done.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-13-forcing-git-pull-to-update-to-remote/"},"frontmatter":{"title":"Forcing git pull to update to remote","tags":["git","github"],"date":"2017-07-13T22:35:41-04:00"}}},{"node":{"id":"e3f21aca-e6bc-58de-a344-d2a7338696a1","excerpt":"One of the best way to learn coding, is to see the open source codes.​ Read more and you will code better.","timeToRead":1,"internal":{"content":"One of the best way to learn coding, is to see the open source codes.​ Read more and you will code better.\n"},"headings":[],"fields":{"slug":"/blog/2017-07-13-the-best-way-to-learn-coding-to-me/"},"frontmatter":{"title":"The best way to learn coding to me","tags":["coding"],"date":"2017-07-13T17:41:24-04:00"}}},{"node":{"id":"b2055dfd-c73f-52d6-85f1-47a2e78dbebc","excerpt":"Recently, as the so-called  Internet of action day  comes, lots of tech companies are promoting the saving Internet Neutrality action. I…","timeToRead":1,"internal":{"content":"Recently, as the so-called [Internet of action day](https://www.battleforthenet.com/july12/) comes, lots of tech companies are promoting the saving Internet Neutrality action. I couldn't help pay some attention to the related links, like Blake(CEO of Godaddy)'s blog [The Free and Open Net Is Under Attack, Again](https://blakesblog.com/2017/07/netneutrality/), the [Internet Association website](https://www.battleforthenet.com/july12/), etc. I have to say I love their articles. And I love the Internet the same as they do. I want the Internet Neutrality stays the same way. \n\nI want the Internet Neutrality remains the way it is, cause I've seen the opposite case in China.\n\nTo me, the best part of Internet is the freedom, and I can never get it without equal openness. \n\n\nI want the Internet Neutrality remains the way it is, cause I've seen the opposite case in China. I've seen the Internet with throttlings and bans. I've seen Google, Facebook, or Instagram banned in favor of the tech companies which were not as good as in the same level.  I have witnessed the real tech giants like Google killed by the 'selected' companies by inequity and left with a much less access to the rest of the world. I wish I won't see this again in America. \n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-13-please-save-the-internet-neutrality/"},"frontmatter":{"title":"Please save the Internet neutrality","tags":["Internet"],"date":"2017-07-13T15:39:38-04:00"}}},{"node":{"id":"f4398621-1cb3-5d7f-b1fb-4d1a51640891","excerpt":"Today I am self-encouraged to write more, which primarily influenced by the following reason: My  blog site  has just been finished and…","timeToRead":1,"internal":{"content":"Today I am self-encouraged to write more, which primarily influenced by the following reason:\n\n1. My [blog site](songwang.io) has just been finished and published, and since it’s a more-than-a-half-year project, with online [CMS](https://www.netlifycms.org/) services(so I can blog anywhere). It will be such a shame if I don’t fulfill some of its purposes. \n2. I started reusing [Grammarly](www.grammarly.com/‎) for grammar checking service recently.\n3. I practiced over months for typing, which would be another shame not used by writing. \n4. Those three reasons' grammar has already annoyed me enough. \n"},"headings":[],"fields":{"slug":"/blog/2017-07-12-starting-to-write/"},"frontmatter":{"title":"Starting to write","tags":["writing"],"date":"2017-07-12T20:32:12-04:00"}}},{"node":{"id":"0e2fe792-4309-556e-a20b-a988ee55564e","excerpt":"If you use Vim, you would be amazed that you can still find something super useful after a long time. Marker navigation is the same case for…","timeToRead":1,"internal":{"content":"If you use Vim, you would be amazed that you can still find something super useful after a long time. Marker navigation is the same case for me.  I've used Vim for over a year, daily, and have a configuration of 800 lines,  yet hadn't met that trick. But today is the day. \n\nTry marking a position with a/b/c... for quick navigation and `''`for jumping back/forward; it's super easy and productive.\n\nnormal mode shortcut | usage\n-|-\n`m{mark name}` | e.g. `ma` for marking position a\n`'{mark name]`| e.g. `ma` for jumping to position a\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-12-navigating-by-marker-in-vim/"},"frontmatter":{"title":"Navigating by marker in Vim","tags":["Vim","Neovim"],"date":"2017-07-12T19:17:57-04:00"}}},{"node":{"id":"872bc47e-a703-5884-b059-a6d3ab236b82","excerpt":"The big difference is that the Internet has always been far more than just the catalog of one company; it’s the catalog of every idea, plus…","timeToRead":1,"internal":{"content":"> The big difference is that the Internet has always been far more than just the catalog of one company; it’s the catalog of every idea, plus the railroads, the postal system and the spirit of exploration rolled into one.\n"},"headings":[],"fields":{"slug":"/blog/2017-07-12-the-difference-between-the-internet-and-a-marketplace/"},"frontmatter":{"title":"The difference between the Internet and a marketplace","tags":["Internet","Web"],"date":"2017-07-12T16:09:26-04:00"}}},{"node":{"id":"6d12df44-ffca-5229-8bfd-d8159f6c82ad","excerpt":"I created this section for sharing short thoughts, enjoy!","timeToRead":1,"internal":{"content":"I created this section for sharing short thoughts, enjoy!\n"},"headings":[],"fields":{"slug":"/blog/2017-07-09-sharing-one-line-thoughts/"},"frontmatter":{"title":"Sharing one line thoughts","tags":["thoughts"],"date":"2017-07-09T20:42:40-04:00"}}},{"node":{"id":"1c67e194-8eff-5216-999f-a51c1c30bf70","excerpt":"I added this plugin called  Tab position options  today to help me opening a new tab right next the current one. Unlike the default behavior…","timeToRead":1,"internal":{"content":"I added this plugin called [Tab position options](https://chrome.google.com/webstore/detail/tab-position-options/fjccjnfkdkdmjohojoggodkigkjkkjhl?hl=en) today to help me opening a new tab right next the current one. Unlike the default behavior, this way helps me focusing on the current sectinon of tabs when too many have been opened on the side.\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-09-opening-tab-on-the-right-next/"},"frontmatter":{"title":"Opening Tab on the right next","tags":["Plugin","Chrome"],"date":"2017-07-09T18:46:58-04:00"}}},{"node":{"id":"2f73e508-8106-54f9-a4a4-d346682db705","excerpt":"Cum sociis natoque penatibus et magnis  dis parturient montes , nascetur ridiculus mus.  Aenean eu leo quam.  Pellentesque ornare sem…","timeToRead":4,"internal":{"content":"![800x400](images/uploads/800x400.png)\n<div class=\"message\">\n  Howdy! This is an example blog post that shows several types of HTML content supported in this website.\n</div>\n\nCum sociis natoque penatibus et magnis <a href=\"#\">dis parturient montes</a>, nascetur ridiculus mus. *Aenean eu leo quam.* Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.\n![800x400](images/uploads/800x400.png)\n\n> Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.\n\nEtiam porta **sem malesuada magna** mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.\n\n## Inline HTML elements\n\nHTML defines a long list of available inline tags, a complete list of which can be found on the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).\n\n- **To bold text**, use `<strong>`.\n- *To italicize text*, use `<em>`.\n- Abbreviations, like <abbr title=\"HyperText Markup Langage\">HTML</abbr> should use `<abbr>`, with an optional `title` attribute for the full phrase.\n- Citations, like <cite>&mdash; Mark otto</cite>, should use `<cite>`.\n- <del>Deleted</del> text should use `<del>` and <ins>inserted</ins> text should use `<ins>`.\n- Superscript <sup>text</sup> uses `<sup>` and subscript <sub>text</sub> uses `<sub>`.\n\nMost of these elements are styled by browsers with few modifications on our part.\n\n## Footnotes\n\nFootnotes are supported as part of the Markdown syntax. Here's one in action. Clicking this number[^fn-sample_footnote] will lead you to a footnote. The syntax looks like:\n\nEach footnote needs the `^fn-` prefix and a unique ID to be referenced for the footnoted content. The syntax for that list looks something like this:\n\nYou can place the footnoted content wherever you like. Markdown parsers should properly place it at the bottom of the post.\n\n## Heading\n\nVivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n\n### Code\n\nInline code is available with the `<code>` element. Snippets of multiple lines of code are supported through Pygments. Longer lines will automatically scroll horizontally when needed.\n\n```js\nlet a = 0\nconsole.log(a)\n```\n\n\nAenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.\n\n### Gists via GitHub Pages\n\nVestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo. Donec sed odio dui.\n![400x200](images/uploads/400x200.png)\n\n\nAenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sed odio dui. Vestibulum id ligula porta felis euismod semper.![400x200](images/uploads/400x200.png)\n\n### Lists\n\nCum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.![800x400](images/uploads/800x400.png)\n\n* Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n* Donec id elit non mi porta gravida at eget metus.\n* Nulla vitae elit libero, a pharetra augue.\n\nDonec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.\n\n1. Vestibulum id ligula porta felis euismod semper.\n2. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n3. Maecenas sed diam eget risus varius blandit sit amet non magna.\n\nCras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.\n\n<dl>\n  <dt>HyperText Markup Language (HTML)</dt>\n  <dd>The language used to describe and define the content of a Web page</dd>\n\n  <dt>Cascading Style Sheets (CSS)</dt>\n  <dd>Used to describe the appearance of Web content</dd>\n\n  <dt>JavaScript (JS)</dt>\n  <dd>The programming language used to build advanced Web sites and applications</dd>\n</dl>\n![200](images/uploads/200x200.png)\nInteger posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.\n\n### Images\n\nQuisque consequat sapien eget quam rhoncus, sit amet laoreet diam tempus. Aliquam aliquam metus erat, a pulvinar turpis suscipit at.![200](images/uploads/200x200.png)\n\n\n\n### Tables\n\nAenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Upvotes</th>\n      <th>Downvotes</th>\n    </tr>\n  </thead>\n  <tfoot>\n    <tr>\n      <td>Totals</td>\n      <td>21</td>\n      <td>23</td>\n    </tr>\n  </tfoot>\n  <tbody>\n    <tr>\n      <td>Alice</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <td>Bob</td>\n      <td>4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>Charlie</td>\n      <td>7</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n\nMarkdown | test\n- | -\n2 | 3\n\n\nNullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.\n\n---\n\nWant to see something else added? <a href=\"https://github.com/poole/poole/issues/new\">Open an issue.</a>\n\n[^fn-sample_footnote]: Handy! Now click the return link to go back.\n"},"headings":[{"value":"Inline HTML elements"},{"value":"Footnotes"},{"value":"Heading"},{"value":"Code"},{"value":"Gists via GitHub Pages"},{"value":"Lists"},{"value":"Images"},{"value":"Tables"}],"fields":{"slug":"/blog/2016-05-24-an-example-markdown-file/"},"frontmatter":{"title":"An example markdown file","tags":["markdown","example"],"date":"2017-07-08T14:59:04-04:00"}}},{"node":{"id":"a8992f05-70b7-5740-b234-4f5db0fcaf07","excerpt":"This blog is created from netlify CMS.","timeToRead":1,"internal":{"content":"This blog is created from netlify CMS.\n\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-05-a-test-from-netlify-cms/"},"frontmatter":{"title":"Creating posts from Netlify CMS","tags":["Netlify","CMS"],"date":"2017-07-05T15:20:51-04:00"}}},{"node":{"id":"85e00407-8acf-5991-977e-a16d13ba9f68","excerpt":"This is the first touch","timeToRead":1,"internal":{"content":"\nThis is the first touch\n\n"},"headings":[],"fields":{"slug":"/blog/2017-07-05-first-touch/"},"frontmatter":{"title":"First touch","tags":["test","markdown"],"date":"2017-07-05T14:53:02-04:00"}}}]}},"pageContext":{}}